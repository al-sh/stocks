{"version":3,"sources":["components/analytics/Analytics.tsx","store/testData.ts","components/functions.ts","store/actions.ts","components/menu/MainMenu.tsx","components/RTable/ToolbarTop.jsx","components/RTable/TableBody/RowContent.jsx","components/RTable/TableBody/ToolbarRow.jsx","components/RTable/TableBody/ScrollerRow.jsx","components/RTable/TableBody/TableBody.jsx","components/RTable/TableFooter/PagerItem.jsx","components/RTable/TableFooter/TableFooter.jsx","components/RTable/TableHeader/HeadItem.tsx","components/RTable/TableHeader/TableHeader.tsx","components/RTable/ItemBlock.jsx","components/RTable/DisplaySettings.jsx","components/RTable/RTable.jsx","components/common/throbber/Throbber.jsx","App.js","serviceWorker.js","store/defaultState.ts","store/reducers/Analytics.ts","store/reducers/Item.ts","store/reducers/Sort.ts","store/reducers/DisplaySettings.ts","store/reducers/Switch.ts","store/reducers/mainReducer.ts","index.js"],"names":["connector","connect","state","currentPortfolioValue","analytics","dispatch","p","close","props","type","show","onChangeCurrentPortfolioValue","e","console","log","target","value","className","onClick","this","style","float","height","width","id","onChange","defaultValue","React","Component","testPortfolios","name","isActive","amount","undefined","testTransfers","currencyId","dt","Portfolio","findEl","arr","i","length","deleteItemFromArray","itemId","indexToDel","splice","getNewId","scData","newId","parseInt","getPageRows","items","pageNumber","rowsinPage","rowsCount","lastRowNum","rows","push","mSort","sortParams","singleCompare","a","b","currentSortParam","fieldName","ascOrder","first","isFinite","parseFloat","second","floatCompare","field","defaultCompare","sort","currentResult","maskAmount","x","parts","toString","split","replace","substring","join","getDataFromBack","url","fetch","response","ok","json","status","Transfers","testDataWarnText","toggleThrobber","visible","showThrobber","sections","portfolios","backUrl","testItems","actionType","transfers","actSwitchToSection","sectionName","selectedSection","newItems","warn","currentSection","switchToTransfers","switchToPortfolios","ToolbarTop","deleteSelectedItems","showItemBlock","showAddEditBlock","showDisplaySettings","showTransfersAnalytics","buttons","key","RowContent","onChangeCheckBox","item","rowClick","event","shiftKey","rowId","columns","filter","column","TDs","withCheckBoxes","checked","selected","text","format","settings","shiftClickItemId","ToolbarRow","delete","edit","editItem","colSpan","col","ScrollerRow","data","Fragment","needShowToolbar","TableBody","nextProps","nextState","activePageRows","activePage","scRows","rowSelected","selectedItems","indexOf","toolBarRowId","PagerItem","goToPage","page","pageNum","PagerFiller","TableFooter","scPages","pagesCount","currentPage","pageItem","toggleSortParams","sortType","ctrlPressed","toggleVisualSort","ctrlKey","headerClassName","headerStyle","sortOrderClassName","sortIndex","isAllRowsSelectedInPage","allRowsSelected","cols","headItems","j","ItemBlock","save","elemToSave","onNameChange","setState","onStatusChange","defaultChecked","marginTop","DisplaySettings","onVisibleChange","Object","assign","getAttribute","onNeedCheckBoxesChange","onRowsPerPageChange","maxValue","columnSettings","htmlFor","colnumber","min","max","marginLeft","Rscroller","display","position","cellSpacing","Throbber","App","RTable","showAnalytics","Boolean","window","location","hostname","match","defaultState","textAlign","paddingRight","Analytics","toggle","action","stateCopy","newColumns","val","Date","toLocaleDateString","aData","now","daysCount","amountDisc","discountPercent","countItemAnalytics","Item","add","Sort","selectedClause","sortParamsContainSelectedField","run","Switch","reduce","sum","updateItems","toggleItemBlock","toggleSelectRow","toggleActivePageRowSelection","toggleRowToolbar","shiftClick","startItemIndex","endItemIndex","tmp","mainReducer","getDefaultState","then","result","preLoadedState","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f1483b1.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { IState } from '../../store/interfaces';\r\n\r\nconst mapState = (state: IState) => {\r\n  return {\r\n    currentPortfolioValue: state.analytics.currentPortfolioValue\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    dispatch: (p: any) => { dispatch(p) }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype IPropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface IAnalyticsProps extends IPropsFromRedux {\r\n  currentPortfolioValue: any\r\n}\r\n\r\n\r\nclass Analytics extends React.Component<IAnalyticsProps, IState>{\r\n  close = () => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TOGGLE',\r\n      show: false\r\n    });\r\n  }\r\n\r\n  onChangeCurrentPortfolioValue = (e: any) => {\r\n    console.log(e.target.value);\r\n    /*\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });*/\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Analytics\">\r\n          <button onClick={this.close} className=\"toolbarButton\" style={{ float: 'right', height: '25px', width: '25px' }}>X</button>\r\n          <div>\r\n            <span className=\"Analytics__Label\">Оценка активов:</span>\r\n            <input id=\"portfolioValueInput\" onChange={this.onChangeCurrentPortfolioValue} type=\"text\" defaultValue={this.props.currentPortfolioValue} />\r\n          </div>\r\n          <div>\r\n            <span className=\"Analytics__Label\">Доходность:</span>\r\n            <span>{this.props.currentPortfolioValue}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connector(Analytics)","import { IPortfolio, ITransfer } from './interfaces';\r\n\r\nconst testPortfolios: IPortfolio[] = [\r\n    { id: 1, name: 'Открытие Брокер', isActive: true, amount: 100500 },\r\n    { id: 2, name: 'Финам', isActive: true, amount: 35000 },\r\n    { id: 3, name: 'Тинькофф Инвестиции', isActive: true, amount: 120000 },\r\n    { id: 4, name: 'Сбербанк', isActive: true, amount: 17000 },\r\n    { id: 5, name: 'ВТБ Капитал', isActive: true, amount: 17000 },\r\n    { id: 6, name: 'БКС Брокер', isActive: false, amount: undefined },\r\n    { id: 7, name: 'ИК Фридом Финанс', isActive: true, amount: 17000 },\r\n    { id: 8, name: 'Fidelity', isActive: true, amount: 17000 },\r\n    { id: 9, name: 'Interactive brokers', isActive: true, amount: 800000 },\r\n    { id: 10, name: 'TD Ameritrade', isActive: false }\r\n];\r\n\r\nexport const testTransfers: ITransfer[] = [\r\n    { id: 1, currencyId: 1, dt: \"2018-08-20T14:00:00.000Z\", amount: 60000, Portfolio: testPortfolios[0] },\r\n    { id: 2, currencyId: 1, dt: \"2018-08-27T14:00:00.000Z\", amount: 190000, Portfolio: testPortfolios[0] },\r\n    { id: 3, currencyId: 1, dt: \"2018-12-03T14:00:00.000Z\", amount: 50000, Portfolio: testPortfolios[0] },\r\n    { id: 4, currencyId: 1, dt: \"2018-12-10T14:00:00.000Z\", amount: 50000, Portfolio: testPortfolios[0] },\r\n];\r\n\r\ntestPortfolios[0].Transfers = testTransfers;\r\n\r\nexport { testPortfolios }","import { ISortParam } from '../store/interfaces';\r\n\r\n/*function formatDate(dt){ \r\n  const lPadZeros = value => { return value.toString().length===1?'0'+value:value }\r\n  \r\n  const year = dt.getFullYear();\r\n  const month = lPadZeros( dt.getMonth()+1 );\r\n  const day = lPadZeros( dt.getDate() );\r\n\r\n  const hours = lPadZeros( dt.getHours() );\r\n  const minutes = lPadZeros( dt.getMinutes() );\r\n  const seconds = lPadZeros( dt.getSeconds() );\r\n\r\n  return year + '-' + month + '-' + day + ' ' + hours + ':'+ minutes + ':' + seconds\r\n}\r\n\r\nfunction sendPOST(url, data) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"POST\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    console.log('POST Data:', data)\r\n    request.send(JSON.stringify(data));\r\n  });\r\n}*/\r\n\r\nfunction findEl(arr: any, id: number): number {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].id === id) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction deleteItemFromArray(arr: any, itemId: number): void {\r\n  const indexToDel: number = findEl(arr, itemId);\r\n  arr.splice(indexToDel, 1);\r\n}\r\n\r\nfunction getNewId(scData: any): number {\r\n  let newId: number = 0;\r\n\r\n  for (let i = 0; i < scData.length; i++) {\r\n    if (parseInt(scData[i].id) > newId) {\r\n      newId = scData[i].id;\r\n    }\r\n  }\r\n  return newId + 1;\r\n}\r\n\r\nfunction getPageRows(items: any, pageNumber: number, rowsinPage: number) {\r\n  const rowsCount = items.length;\r\n\r\n  const firstRowNum = pageNumber * rowsinPage;\r\n  let lastRowNum = (pageNumber + 1) * rowsinPage;\r\n  if (lastRowNum > rowsCount) lastRowNum = rowsCount;\r\n\r\n  let rows = [];\r\n  for (let i = firstRowNum; i < lastRowNum; i++) {\r\n    rows.push(items[i]);\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\n//на входе - json, в котором указано в каком порядке сортируется и сам scrollerData\r\n//на выходе - отсортированный scrollerData (изменяет текущий)\r\n//const mSort = (scData, sortParams) => { \r\nfunction mSort(scData: any, sortParams: ISortParam[]) {\r\n  const defaultCompare = (a: any, b: any, fieldName: string, ascOrder: boolean) => {\r\n    if (a[fieldName] > b[fieldName]) {\r\n      return ascOrder ? 1 : -1;\r\n    }\r\n    if (a[fieldName] < b[fieldName]) {\r\n      return ascOrder ? -1 : 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const floatCompare = (a: any, b: any, fieldName: string, ascOrder: boolean) => {\r\n    const first = isFinite(parseFloat(a[fieldName])) ? parseFloat(a[fieldName]) : 0;\r\n    const second = isFinite(parseFloat(b[fieldName])) ? parseFloat(b[fieldName]) : 0;\r\n\r\n    if (first > second) {\r\n      return ascOrder ? 1 : -1;\r\n    }\r\n    if (first < second) {\r\n      return ascOrder ? -1 : 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const singleCompare = (a: any, b: any, currentSortParam: ISortParam) => {\r\n    if (currentSortParam.type === 'float') {\r\n      return floatCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n    if (currentSortParam.type === 'default') {\r\n      return defaultCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n  }\r\n\r\n  const compareFunction = (a: any, b: any) => {\r\n    let currentSortParam;\r\n\r\n    for (let i = 0; i < sortParams.length; i++) {\r\n      currentSortParam = sortParams[i];\r\n      const currentResult = singleCompare(a, b, currentSortParam);\r\n      if (currentResult !== 0) {\r\n        return currentResult;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  return scData.sort(compareFunction);\r\n}\r\n\r\nfunction maskAmount(x: any) {\r\n  if (!isFinite(x)) {\r\n    return '';\r\n  }\r\n\r\n  var parts = x.toString().split(\".\");\r\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  parts[1] = parts[1] ? parts[1].substring(0, 2) : '00';\r\n  return parts.join(\".\");\r\n}\r\n\r\n/*async function getDataFromBack(url) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    request.send();\r\n  });\r\n}*/\r\n\r\nasync function getDataFromBack(url: string) {\r\n  let response = await fetch(url);\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else {\r\n    console.log(\"Ошибка HTTP: \" + response.status);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { findEl, mSort, getNewId, getPageRows, deleteItemFromArray, maskAmount, getDataFromBack };","import { testPortfolios, testTransfers } from './testData'\r\nimport { getDataFromBack } from '../components/functions';\r\n\r\nconst testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\nexport function toggleVisualSort(fieldName: string, sortType: string, ctrlPressed: boolean) {\r\n    return { type: 'SORT.TOGGLE', field: fieldName, sortType: sortType, ctrlPressed: ctrlPressed }\r\n}\r\n\r\nfunction toggleThrobber(dispatch: any, visible: boolean) {\r\n    dispatch({\r\n        type: 'TOGGLE_THROBBER',\r\n        showThrobber: visible\r\n    });\r\n}\r\n\r\nconst sections: any = {\r\n    portfolios: {\r\n        backUrl: '/getportfolios',\r\n        testItems: testPortfolios,\r\n        actionType: 'SWITCH.PORTFOLIOS'\r\n    },\r\n    transfers: {\r\n        backUrl: '/transfers.getall',\r\n        testItems: testTransfers,\r\n        actionType: 'SWITCH.TRANSFERS'\r\n    }\r\n}\r\n\r\nexport async function actSwitchToSection(sectionName: string, dispatch: any) {\r\n    toggleThrobber(dispatch, true);\r\n\r\n    const selectedSection = sections[sectionName];\r\n    let newItems = await getDataFromBack(selectedSection.backUrl);\r\n    if (!newItems) {\r\n        console.warn(testDataWarnText);\r\n        newItems = selectedSection.testItems;\r\n    }\r\n    console.log(newItems);\r\n\r\n    dispatch({\r\n        type: selectedSection.actionType,\r\n        items: newItems\r\n    });\r\n    toggleThrobber(dispatch, false);\r\n}","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport {actSwitchToSection} from '../../store/actions' \r\nimport { IState } from '../../store/interfaces'\r\n\r\nconst mapState = (state: IState) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nconst mapDispatch = null;\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface ReduxProps {\r\n  dispatch: any\r\n}\r\n\r\ninterface MainMenuProps extends ReduxProps {\r\n  currentSection: string\r\n}\r\n\r\nclass MainMenu extends React.Component<MainMenuProps, IState> {\r\n  testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\n  switchToTransfers = async (e: any) => {\r\n    actSwitchToSection('transfers', this.props.dispatch);\r\n  }\r\n\r\n  switchToPortfolios = async (e: any) => {\r\n    actSwitchToSection('portfolios', this.props.dispatch);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"MainMenu\">\r\n        <span onClick={this.switchToTransfers} className={this.props.currentSection==='transfers'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Зачисления</span>\r\n        <span onClick={this.switchToPortfolios} className={this.props.currentSection==='portfolios'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Портфели</span>       \r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nexport default connector(MainMenu)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ToolbarTop extends React.Component {\r\n  deleteSelectedItems = (e) => {    \r\n    this.props.dispatch({\r\n      type: 'DELETE_SELECTED_ITEMS'\r\n    });\r\n  }\r\n\r\n  showItemBlock = (e) => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true\r\n    });\r\n  }\r\n\r\n  showDisplaySettings = (e) => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: true\r\n    });\r\n  }\r\n\r\n  showTransfersAnalytics = (e) => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TRANSFERS',\r\n      showDisplaySettings: true\r\n    });\r\n  }\r\n  \r\n  render() {   \r\n    const buttons = [];\r\n    buttons.push( <button key=\"btnDel\" onClick={this.deleteSelectedItems} className=\"toolbarButton\">Удалить</button> );\r\n    buttons.push( <button key=\"btnAdd\" onClick={this.showItemBlock} className=\"toolbarButton\">Добавить</button> );\r\n    buttons.push( <button key=\"btnSettings\" onClick={this.showDisplaySettings} className=\"toolbarButton\">Настройка</button> );\r\n    if (this.props.currentSection==='transfers') {\r\n      buttons.push( <button key=\"transfers_Analytics\" onClick={this.showTransfersAnalytics} className=\"toolbarButton\">Аналитика</button> );\r\n    }\r\n\r\n    return (\r\n      <div className=\"ToolbarTop\">        \r\n        {buttons}\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ToolbarTop)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass RowContent extends React.Component {\r\n  onChangeCheckBox = () => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_SELECT_ROW',\r\n      item: this.props.item\r\n    });\r\n  }\r\n\r\n  rowClick  = (event) => {     \r\n    if (event.target.name==='rowCheck') return;  \r\n    if (event.shiftKey) { \r\n      this.props.dispatch({\r\n        type: 'SHIFT_CLICK',\r\n        rowId: this.props.item.id\r\n      }); \r\n      return; \r\n    }  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const item = this.props.item;\r\n    const columns = this.props.columns.filter(column => column.visible);\r\n\r\n    const TDs = [];\r\n    if (this.props.withCheckBoxes) {\r\n      TDs.push(<td key={\"td_checkBox_itemId_\"+item.id}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.props.selected}/></td>);\r\n    }\r\n\r\n    for (let i=0; i<columns.length; i++){       \r\n      let text = '';\r\n      if (columns[i].format) {\r\n        text = columns[i].format( item[columns[i].field] ); \r\n      } else { \r\n        if (item[columns[i].field]) text = item[columns[i].field].toString(); \r\n      } \r\n      TDs.push(<td key={\"td_itemId_\"+item.id+'_col_'+i} style={columns[i].style} >{ text }</td>);\r\n    }\r\n    \r\n    return (      \r\n      <tr key={item.id} className={this.props.selected?'rowSel':''} onClick={this.rowClick}>\r\n        {TDs}\r\n      </tr>          \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n  return {\r\n    columns: state.columns,\r\n    items: state.items,\r\n    withCheckBoxes: state.settings.withCheckBoxes,    \r\n    shiftClickItemId: state.settings.shiftClickItemId    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RowContent)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ToolbarRow extends React.Component {\r\n\r\n  delete  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'ITEM.DELETE',\r\n      itemId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  edit  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true,\r\n      editItem: this.props.item\r\n    });\r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td colSpan={this.props.columns.filter(col => col.visible).length}>\r\n          <button onClick={this.delete} className=\"toolbarButton\">Удалить</button>\r\n          <button onClick={this.edit} className=\"toolbarButton\">Редактировать</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    columns: state.columns\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ToolbarRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport RowContent from './RowContent';\r\nimport ToolbarRow from './ToolbarRow';\r\n\r\nclass ScrollerRow extends React.Component { \r\n  render() {\r\n    const item = this.props.data;\r\n    \r\n    return (\r\n      <React.Fragment> \r\n        <RowContent key={item.id} item={item} selected={this.props.selected} /> \r\n        { this.props.needShowToolbar ? <ToolbarRow item={item} /> : null }\r\n      </React.Fragment>    \r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null)(ScrollerRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ScrollerRow from './ScrollerRow';\r\n\r\nimport {getPageRows} from '../../functions';\r\n\r\nclass TableBody extends React.Component { \r\n  shouldComponentUpdate(nextProps, nextState){\r\n    //console.log('shouldComponentUpdate old props', this.props, 'nextProps:', nextProps);\r\n    return true;\r\n  } \r\n\r\n  render() {   \r\n    const items = this.props.items;    \r\n    const activePage = this.props.activePage;\r\n    const rowsinPage = this.props.rowsinPage;\r\n      \r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n    const scRows = [];  \r\n    \r\n    for (let i=0; i<activePageRows.length; i++){     \r\n      const rowSelected = ~this.props.selectedItems.indexOf(activePageRows[i].id)?true:false;     \r\n      const needShowToolbar = (this.props.toolBarRowId===activePageRows[i].id);\r\n      scRows.push(<ScrollerRow key={'scrollerRow_'+i} data={activePageRows[i]} selected={rowSelected} needShowToolbar={needShowToolbar} />);\r\n    }\r\n    \r\n    return (\r\n      <tbody>              \r\n        {scRows}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.items,\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,  \r\n    toolBarRowId: state.settings.toolBarRowId,  \r\n    selectedItems: state.selectedItems    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TableBody)","import React from 'react';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerItem extends React.Component {\r\n  goToPage  = (page) => {       \r\n    this.props.dispatch({\r\n      type: 'GO_TO_PAGE',\r\n      page: this.props.data.pageNum\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n   \r\n    return (\r\n      <span onClick={this.goToPage} className={this.props.isActive?'activePage':''}>\r\n        {data.pageNum+1}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, null)(PagerItem)","import React from 'react';\r\nimport PagerItem from './PagerItem';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerFiller extends React.Component {\r\n  render() {   \r\n    return (\r\n      <span className=\"pagerFiller\">\r\n        ...\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass TableFooter extends React.Component {  \r\n  render() {    \r\n    const rowsinPage = this.props.rowsinPage;\r\n    const rowsCount = this.props.rowsCount;\r\n    const activePage = this.props.activePage;\r\n\r\n    const scPages = [];  \r\n    let pagesCount = ((rowsCount - rowsCount % rowsinPage) / rowsinPage);  \r\n    if (rowsCount % rowsinPage > 0) {\r\n      pagesCount = pagesCount + 1;\r\n    }\r\n    \r\n    const nearPagesCount = 2;\r\n    for(let i=0; i < pagesCount; i++){ \r\n      let currentPage = {};\r\n      currentPage.pageNum = i; \r\n      let pageItem = <PagerItem key={'pg'+currentPage.pageNum} data={currentPage} isActive={activePage===i?true:false} />;\r\n\r\n      if (pagesCount>10) { //показываем только часть страниц\r\n        if ( (i===0) && (i < activePage - nearPagesCount) ){//первая страница\r\n          scPages.push(pageItem);\r\n          if (activePage - nearPagesCount !== 1) {  //чтобы не отображать филлер, если следующая страница - вторая\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }         \r\n        }       \r\n        if ( (i >= activePage - nearPagesCount) && (i <= activePage + nearPagesCount) ) {\r\n          scPages.push(pageItem);\r\n        }\r\n        \r\n        if ( (i===pagesCount-1) && (i > activePage + nearPagesCount) ){//последняя страница\r\n          if (activePage + nearPagesCount !== pagesCount-2){ //чтобы не отображать филлер, если предыдущая страница - предпоследняя\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }          \r\n          scPages.push(pageItem);\r\n        }        \r\n      } else {\r\n        scPages.push(pageItem);\r\n      }      \r\n    }\r\n\r\n    //return scPages;\r\n    return <div className=\"pageBlock\">{scPages}</div>     \r\n  } \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    rowsCount: state.items.length\r\n  }\r\n}\r\n\r\n//export default TableFooter;\r\nexport default connect(mapStateToProps)(TableFooter)","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { toggleVisualSort } from '../../../store/actions';\r\nimport { IColumn, IState } from '../../../store/interfaces'\r\n\r\nconst mapState = (state: IState) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    toggleSortParams: (field: string, sortType: string, ctrlPressed: boolean) => {\r\n      dispatch( toggleVisualSort(field, sortType, ctrlPressed) )\r\n    }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface HeadItemProps extends PropsFromRedux, IColumn {\r\n  headerStyle?: any\r\n  sortIndex?: number,  \r\n  sortOrderClassName?: string,\r\n}\r\n\r\nclass HeadItem extends React.Component<HeadItemProps, IState> {  \r\n  sort  = (event: any) => {  \r\n    const sortType = this.props.type?this.props.type:'default';\r\n    const field = this.props.field; \r\n    const ctrlPressed = event.ctrlKey;\r\n    this.props.toggleSortParams(field, sortType, ctrlPressed);\r\n  }\r\n\r\n  render(){\r\n    return (      \r\n      <td className={this.props.headerClassName} style={this.props.headerStyle} >\r\n        <span className=\"sortHeader\" onClick={this.sort}>{this.props.text}</span>        \r\n        <span className={this.props.sortOrderClassName}></span>\r\n        <span className=\"sortNumber\">{this.props.sortIndex}</span>\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connector(HeadItem)","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport HeadItem from './HeadItem';\r\nimport { getPageRows } from '../../functions';\r\nimport { IColumn, IState } from '../../../store/interfaces';\r\n\r\nconst mapState = (state: IState) => {\r\n  return {\r\n    columns: state.columns,\r\n    items: state.items,\r\n    page: state.settings.activePage,\r\n    withCheckBoxes: state.settings.withCheckBoxes,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    selectedItems: state.selectedItems,\r\n    sortParams: state.sortParams\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    dispatch: (p: any) => { \r\n      dispatch(p) \r\n    }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype IPropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface ITableHeaderProps extends IPropsFromRedux {\r\n  items: any\r\n  page: number,\r\n  rowsinPage: number,\r\n}\r\n\r\nclass TableHeader extends React.Component<ITableHeaderProps, IState>{\r\n  onChangeCheckBox = (event: any) => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION',\r\n      selected: event.target.checked\r\n    });\r\n  }\r\n\r\n  isAllRowsSelectedInPage = () => {\r\n    const items = this.props.items;\r\n    const activePage = this.props.page;\r\n    const rowsinPage = this.props.rowsinPage;\r\n\r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n\r\n    let allRowsSelected = true;\r\n    for (let i = 0; i < activePageRows.length; i++) {\r\n      if (this.props.selectedItems.indexOf(activePageRows[i].id) === -1) {\r\n        allRowsSelected = false;\r\n      }\r\n    }\r\n\r\n    if (activePageRows.length === 0) { allRowsSelected = false; }\r\n\r\n    return allRowsSelected;\r\n  }\r\n\r\n  render() {\r\n    //console.log('tableHeader - render');\r\n    const sortParams = this.props.sortParams;\r\n    const columns: IColumn[] = this.props.columns.filter((column: IColumn) => column.visible);\r\n\r\n    const cols = [];\r\n    const headItems = [];\r\n\r\n    if (this.props.withCheckBoxes) {\r\n      cols.push(<col key={\"col_cb\"} width=\"50\" />);\r\n      headItems.push(<td key={\"headItem_cb\"}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.isAllRowsSelectedInPage()} /></td>);\r\n    }\r\n\r\n    for (let i = 0; i < columns.length; i++) {\r\n      let sortIndex, sortOrderClassName;\r\n      if (sortParams.length > 0) {\r\n        for (let j = 0; j < sortParams.length; j++) {\r\n          if (sortParams[j].field === columns[i].field) {\r\n            sortIndex = j + 1;\r\n            sortOrderClassName = sortParams[j].ascOrder ? 'sortArrowUp' : 'sortArrowDown';\r\n          }\r\n        }\r\n\r\n      }\r\n      cols.push(<col key={\"col_\" + i} width={columns[i].width} />);\r\n      headItems.push(<HeadItem key={\"headItem_\" + i} field={columns[i].field} type={columns[i].type} visible={columns[i].visible}\r\n        headerClassName={columns[i].headerClassName} headerStyle={columns[i].headerStyle}\r\n        text={columns[i].text} sortIndex={sortIndex} sortOrderClassName={sortOrderClassName} />);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <colgroup>\r\n          {cols}\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            {headItems}\r\n          </tr>\r\n        </thead>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connector(TableHeader)","import React from 'react';\r\nimport {getNewId} from '../functions';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass ItemBlock extends React.Component { \r\n  state = { \r\n    id:  this.props.editItem?this.props.editItem.id:0, \r\n    name:  this.props.editItem?this.props.editItem.name:\"Название\",   \r\n    isActive: this.props.editItem?this.props.editItem.isActive:false\r\n  }   \r\n\r\n  save  = (p) => { \r\n    let elemToSave = {};\r\n    \r\n    elemToSave.id = this.state.id;    \r\n    elemToSave.name = this.state.name;    \r\n    elemToSave.isActive = this.state.isActive;  \r\n    \r\n    console.log(elemToSave);\r\n    if (this.props.editItem) {\r\n      this.props.dispatch({\r\n        type: 'ITEM.EDIT',\r\n        item: elemToSave\r\n      });\r\n    } else {\r\n      elemToSave.id = getNewId(this.props.items);\r\n      this.props.dispatch({\r\n        type: 'ITEM.ADD',\r\n        item: elemToSave\r\n      });\r\n       /*accountsendPOST('/addportfolio', elemToSave).then(response => {\r\n      RscrollerFunctions.toggleAddEditBlock(false);\r\n      RscrollerFunctions.refresh(true);\r\n      });*/\r\n    }\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n  \r\n  onNameChange = (e) => {    \r\n    this.setState({name: e.target.value});   \r\n  }\r\n  \r\n  onStatusChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({isActive: e.target.checked});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    let item = {};\r\n\r\n    if (this.props.editItem) {  \r\n      item = this.props.editItem;  \r\n    } else {\r\n      item.name = 'Название1';    \r\n      item.isActive = false;\r\n    }     \r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>\r\n          <span className=\"itemBlock__label\">Название:</span>\r\n          <input id=\"fio\" onChange={this.onNameChange} type=\"text\" defaultValue={item.name} />\r\n        </div>        \r\n        <div>\r\n          <span className=\"itemBlock__label\">Активный</span>\r\n          <input id=\"status\" onChange={this.onStatusChange} type=\"checkbox\" defaultChecked={item.isActive} />           \r\n        </div>  \r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    items: state.items,\r\n    editItem: state.settings.editItem\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemBlock)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DisplaySettings extends React.Component { //на будущее, можно добавить количество строк на странице для выбора\r\n  state = { \r\n    columns:  this.props.columns,\r\n    rowsinPage: this.props.rowsinPage,\r\n    withCheckBoxes: this.props.withCheckBoxes\r\n  }   \r\n\r\n  save  = (p) => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.SAVE',\r\n      columns: this.state.columns,\r\n      rowsinPage: this.state.rowsinPage,\r\n      withCheckBoxes: this.state.withCheckBoxes\r\n    });\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: false\r\n    });\r\n  }\r\n  \r\n  onVisibleChange = (e) => {\r\n    let columns = Object.assign([], this.state.columns);   \r\n    columns[e.target.getAttribute('colnumber')].visible = e.target.checked;\r\n    this.setState({columns: columns});   \r\n  }\r\n\r\n  onNeedCheckBoxesChange = (e) => {\r\n    this.setState({withCheckBoxes: e.target.checked});   \r\n  }\r\n\r\n  onRowsPerPageChange = (e) => {\r\n    const value = parseInt(e.target.value);  \r\n    const maxValue = parseInt( e.target.getAttribute('max') );\r\n\r\n    if (value > maxValue) {      \r\n      e.target.value = maxValue;     \r\n    }  \r\n    this.setState({rowsinPage: value});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    const columns = this.props.columns;\r\n    let columnSettings = [];\r\n    for (let i=0; i<columns.length; i++){\r\n      columnSettings.push(\r\n        <div key={\"columnSettings_\"+i}>\r\n          <label htmlFor={\"columnSettingsInp_\"+i}>{columns[i].text}</label>\r\n          <input id={\"columnSettingsInp_\"+i} colnumber={i} field={columns[i].field} onChange={this.onVisibleChange} type=\"checkbox\" defaultChecked={columns[i].visible} />  \r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>Настройка отображения полей</div>\r\n        {columnSettings}\r\n        <div>\r\n          <span>Количество строк на странице:</span>\r\n          <input type=\"number\" min={1} max={100} name=\"rowsPerPage\" onChange={this.onRowsPerPageChange} defaultValue={this.props.rowsinPage}\r\n                 style={ {marginLeft: '10px', width: '50px'} } />\r\n        </div>\r\n        <div>\r\n          <label htmlFor={'inp_needCheckBoxes'}>Чекбоксы</label>\r\n          <input id={'inp_needCheckBoxes'} type=\"checkbox\" onChange={this.onNeedCheckBoxesChange} defaultChecked={this.props.withCheckBoxes} />\r\n        </div>\r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    columns: state.columns,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    withCheckBoxes: state.settings.withCheckBoxes\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DisplaySettings)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ToolbarTop from './ToolbarTop';\r\nimport TableBody from './TableBody/TableBody';\r\nimport TableFooter from './TableFooter/TableFooter';\r\nimport TableHeader from './TableHeader/TableHeader';\r\n\r\n//custom components\r\nimport ItemBlock from './ItemBlock';\r\nimport DisplaySettings from './DisplaySettings';\r\n\r\nclass Rscroller extends React.Component { \r\n  render() {     \r\n    return (\r\n      <div style={{display: 'inline-block', position: 'relative' }}>\r\n        { this.props.showAddEditBlock ? <ItemBlock /> : null }\r\n        { this.props.showDisplaySettings ? <DisplaySettings /> : null }\r\n        <div className=\"rScroller\">\r\n          <div className=\"rScrollerHeader\">\r\n            <ToolbarTop />\r\n          </div>          \r\n          <table cellSpacing=\"0\">  \r\n            <TableHeader />\r\n            <TableBody />            \r\n          </table>            \r\n          <TableFooter />\r\n        </div>        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    showAddEditBlock: state.settings.showAddEditBlock,\r\n    showDisplaySettings: state.settings.showDisplaySettings\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps, //mapStateToProps\r\n  null //mapDispatchToProps\r\n)(Rscroller)","import React from 'react';\r\n\r\nclass Throbber extends React.Component {\r\n    render(){\r\n        return (      \r\n            <div className=\"Throbber\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Throbber;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport Analytics from './components/analytics/Analytics';\r\nimport MainMenu from './components/menu/MainMenu';\r\nimport RTable from './components/RTable/RTable';\r\nimport Throbber from './components/common/throbber/Throbber';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <MainMenu />\r\n        {this.props.showThrobber ? <Throbber /> : <RTable />}\r\n        {this.props.showAnalytics ? <Analytics /> : null }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    showThrobber: state.showThrobber,\r\n    showAnalytics: state.analytics.show\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null //mapDispatchToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { testPortfolios } from './testData'\r\nimport { IState } from './interfaces'\r\nimport { maskAmount } from '../components/functions';\r\n\r\nexport const defaultState: IState = {\r\n    analytics: {\r\n        currentPortfolioValue: 400000\r\n    }, \r\n    currentSection: 'portfolios',\r\n    columns: [\r\n        {\r\n            width: '200px',\r\n            field: 'name',\r\n            text: 'Название',\r\n            visible: true\r\n        },\r\n        {\r\n            width: '160px',\r\n            field: 'isActive',\r\n            text: 'Статус',\r\n            format: (isActive: boolean) => { return isActive ? 'Активный' : 'Не активный'; },\r\n            visible: true\r\n        },\r\n        {\r\n            width: '150px',\r\n            field: 'amount',\r\n            text: 'Сумма',\r\n            type: 'float',\r\n            headerClassName: 'header-amount',\r\n            style: { textAlign: 'right', paddingRight: '15px' },\r\n            format: maskAmount,\r\n            visible: true\r\n        }\r\n    ],\r\n    items: testPortfolios,\r\n    selectedItems: [],\r\n    settings: {\r\n        rowsinPage: 5,\r\n        activePage: 0,\r\n        withCheckBoxes: false,\r\n        showDisplaySettings: false,\r\n        showAddEditBlock: false,\r\n        editItem: null,\r\n        shiftClickItemId: null,\r\n        toolBarRowId: null\r\n    },\r\n    showThrobber: false,\r\n    sortParams: [{ field: \"name\", type: \"default\", ascOrder: true }]\r\n};","import { maskAmount } from '../../components/functions';\r\nimport { IColumn, IPortfolio, IState } from '../interfaces';\r\n\r\nconst Analytics = {\r\n\ttoggle: (state: IState, action: any): IState => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.analytics.show = action.show;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n\ttransfers: (state: IState, action: any): IState => {\r\n\t\tlet discountPercent = 6;\r\n\r\n\t\tfunction countItemAnalytics(aData: any) {\r\n\t\t\tfor (let i = 0; i < aData.length; i++) {\r\n\t\t\t\tconst item = aData[i];\r\n\t\t\t\tconst dt: any = new Date(item.dt);\r\n\t\t\t\tconst now: any = new Date();\r\n\t\t\t\titem.daysCount = (now - dt) / (1000 * 60 * 60 * 24);\r\n\t\t\t\titem.amountDisc = item.amount * (1 + discountPercent / 100 * item.daysCount / 366);\r\n\t\t\t}\r\n\r\n\t\t\treturn aData;\r\n\t\t}\r\n\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tif (stateCopy.currentSection !== 'transfers') {\r\n\t\t\tconsole.warn('Аналитика пока доступна только для зачислений');\r\n\t\t\treturn stateCopy;\r\n\t\t}\r\n\r\n\t\tstateCopy.analytics.show = true;\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '100px',\r\n\t\t\t\tfield: 'dt',\r\n\t\t\t\ttext: 'Дата',\r\n\t\t\t\tformat: (val: any) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '200px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Портфель',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '120px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'amount',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '140px',\r\n\t\t\t\tfield: 'daysCount',\r\n\t\t\t\ttext: 'Кол-во дней',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '120px',\r\n\t\t\t\tfield: 'amountDisc',\r\n\t\t\t\ttext: 'Под ' + discountPercent + ' %',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tcountItemAnalytics(stateCopy.items);\r\n\r\n\t\tstateCopy.settings.activePage = 0;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n}\r\n\r\nexport default Analytics","import { mSort, deleteItemFromArray } from '../../components/functions';\r\n\r\nconst Item = { //функции работы с элементом списка\r\n  add: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n    items.push(action.item);\r\n\r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;\r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  },\r\n\r\n  edit: (state: any, action: any) => {\r\n    //let stateCopy = getObjCopy(state);\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n\r\n    deleteItemFromArray(items, action.item.id);\r\n    items.push(action.item);\r\n\r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;\r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  },\r\n\r\n  delete: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n\r\n    deleteItemFromArray(items, action.itemId);\r\n\r\n    stateCopy.selectedItems = [];\r\n    stateCopy.items = items;\r\n    return stateCopy;\r\n  }\r\n\r\n}\r\n\r\nexport default Item","import { mSort } from '../../components/functions';\r\nimport { ISortParam } from '../interfaces';\r\n\r\nconst Sort = {\r\n  toggle: (state: any, action: any) => {\r\n    const selectedClause = {\r\n      field: action.field,\r\n      type: action.sortType,\r\n      ascOrder: true\r\n    };\r\n\r\n    let stateCopy = Object.assign({}, state);\r\n    let sortParams: ISortParam[] = Object.assign([], stateCopy.sortParams);\r\n\r\n    if (sortParams.length > 0) {\r\n      if (sortParams[0].field === selectedClause.field) {\r\n        selectedClause.ascOrder = !sortParams[0].ascOrder;\r\n      }\r\n    }\r\n\r\n    if (action.ctrlPressed) {\r\n      let sortParamsContainSelectedField = false;\r\n      for (let i = 0; i < sortParams.length; i++) {\r\n        if (sortParams[i].field === selectedClause.field) {\r\n          //смена порядка сортировки по заданному полю в случае ctrl+click          \r\n          selectedClause.ascOrder = !sortParams[i].ascOrder;\r\n          sortParams[i] = selectedClause;\r\n          sortParamsContainSelectedField = true;\r\n        }\r\n      }\r\n\r\n      if (!sortParamsContainSelectedField) {\r\n        sortParams.push(selectedClause);\r\n      }\r\n    } else {\r\n      sortParams = [];\r\n      sortParams.push(selectedClause);\r\n    }\r\n\r\n    let newItems = Object.assign([], stateCopy.items);\r\n    mSort(newItems, sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    stateCopy.sortParams = sortParams;\r\n\r\n    return stateCopy;\r\n  },\r\n\r\n  run: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let newItems = Object.assign([], stateCopy.items);\r\n\r\n    mSort(newItems, stateCopy.sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    return stateCopy;\r\n  }\r\n}\r\n\r\nexport default Sort","const DisplaySettings = {\r\n  toggle: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    stateCopy.settings.showDisplaySettings = action.showDisplaySettings;\r\n    return stateCopy;\r\n  },\r\n\r\n  save: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    stateCopy.columns = action.columns;\r\n    stateCopy.settings.rowsinPage = action.rowsinPage;\r\n    stateCopy.settings.withCheckBoxes = action.withCheckBoxes;\r\n    stateCopy.settings.showDisplaySettings = false;\r\n    stateCopy.settings.activePage = 0;\r\n    return stateCopy;\r\n  }\r\n}\r\n\r\nexport default DisplaySettings","import { maskAmount } from '../../components/functions';\r\nimport { IColumn, IPortfolio, ITransfer } from '../interfaces';\r\n\r\nconst Switch = {\r\n\r\n\ttransfers: (state: any, action: any) => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.currentSection = 'transfers';\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '100px',\r\n\t\t\t\tfield: 'dt',\r\n\t\t\t\ttext: 'Дата',\r\n\t\t\t\tformat: (val: any) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '200px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Портфель',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'amount',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t//const newItems = await getDataFromBack('/transfers.getall');  \r\n\t\t//console.log(newItems);\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tstateCopy.items = action.items;\r\n\r\n\t\tstateCopy.page = 0;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n\tportfolios: (state: any, action: any) => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.currentSection = 'portfolios';\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '250px',\r\n\t\t\t\tfield: 'name',\r\n\t\t\t\ttext: 'Название',\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '160px',\r\n\t\t\t\tfield: 'isActive',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (isActive: boolean) => { return isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'Transfers',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: (Transfers: ITransfer[]) => {\r\n\t\t\t\t\tif (Transfers) { //todo: add transfers to testPortfolios\r\n\t\t\t\t\t\treturn maskAmount(Transfers.reduce((sum, item) => { return sum + item.amount }, 0))\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t]\r\n\r\n\t\t//console.log(newItems);\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tstateCopy.items = action.items;\r\n\r\n\t\tstateCopy.page = 0;\r\n\t\treturn stateCopy;\r\n\t}\r\n}\r\n\r\nexport default Switch","//import { SORT.TOGGLE } from './actions';\r\nimport { mSort, deleteItemFromArray, getPageRows, findEl } from '../../components/functions';\r\nimport Analytics from './Analytics'\r\nimport Item from './Item'\r\nimport Sort from './Sort'\r\nimport DisplaySettings from './DisplaySettings'\r\nimport Switch from './Switch'\r\n\r\nconst goToPage = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.settings.activePage = action.page;\r\n  return stateCopy;\r\n}\r\n\r\nconst updateItems = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.items = action.items; //need copy?\r\n  mSort(stateCopy.items, stateCopy.sortParams);\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleItemBlock = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.settings.showAddEditBlock = action.showAddEditBlock;\r\n  if (action.editItem) {\r\n    stateCopy.settings.editItem = action.editItem;\r\n  } else {\r\n    stateCopy.settings.editItem = null;\r\n  }\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleSelectRow = (state: any, action: any) => {\r\n  const itemId = action.item.id;\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (~selectedItems.indexOf(itemId)) {\r\n    selectedItems.splice(selectedItems.indexOf(itemId), 1);\r\n  } else {\r\n    selectedItems.push(itemId);\r\n  }\r\n  stateCopy.selectedItems = selectedItems;\r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleThrobber = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.showThrobber = action.showThrobber;\r\n  return stateCopy;\r\n}\r\n\r\nconst deleteSelectedItems = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let items = Object.assign([], stateCopy.items);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  for (let i = 0; i < selectedItems.length; i++) {\r\n    deleteItemFromArray(items, selectedItems[i]);\r\n  }\r\n\r\n  stateCopy.selectedItems = [];\r\n  stateCopy.items = items;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleActivePageRowSelection = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (action.selected) {\r\n    selectedItems = [];\r\n    const activePageRows = getPageRows(stateCopy.items, stateCopy.page, stateCopy.rowsinPage);\r\n    for (let i = 0; i < activePageRows.length; i++) {\r\n      selectedItems.push(activePageRows[i].id);\r\n    }\r\n  } else {\r\n    selectedItems = [];\r\n  }\r\n  stateCopy.selectedItems = selectedItems;\r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleRowToolbar = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  if (stateCopy.settings.toolBarRowId === action.rowId) {\r\n    stateCopy.settings.toolBarRowId = null;\r\n  } else {\r\n    stateCopy.settings.toolBarRowId = action.rowId;\r\n  }\r\n  return stateCopy;\r\n}\r\n\r\nconst shiftClick = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n  stateCopy.settings.toolBarRowId = null;\r\n  stateCopy.settings.showAddEditBlock = false;\r\n\r\n  if (stateCopy.settings.shiftClickItemId) {\r\n    let startItemIndex: number = findEl(stateCopy.items, stateCopy.settings.shiftClickItemId);\r\n    let endItemIndex: number = findEl(stateCopy.items, action.rowId);\r\n    //console.log('shiftClickItemId:'+shiftClickItemId+' startItemIndex:'+startItemIndex+' endItemIndex:'+endItemIndex);\r\n    if (startItemIndex > endItemIndex) {\r\n      const tmp = startItemIndex;\r\n      startItemIndex = endItemIndex;\r\n      endItemIndex = tmp;\r\n    }\r\n\r\n    selectedItems = [];\r\n    for (let i = startItemIndex; i <= endItemIndex; i++) {\r\n      selectedItems.push(stateCopy.items[i].id);\r\n    }\r\n\r\n    stateCopy.settings.shiftClickItemId = stateCopy.items[endItemIndex].id;\r\n  } else {\r\n    stateCopy.settings.shiftClickItemId = action.rowId;\r\n    selectedItems.push(action.rowId);\r\n  }\r\n\r\n  stateCopy.selectedItems = selectedItems;\r\n  return stateCopy;\r\n}\r\n\r\nconst mainReducer = (state: any = [], action: any) => {\r\n  switch (action.type) {\r\n    case 'ANALYTICS.TOGGLE': return Analytics.toggle(state, action);\r\n    case 'ANALYTICS.TRANSFERS': return Analytics.transfers(state, action);\r\n\r\n    case 'ITEM.ADD': return Item.add(state, action);\r\n    case 'ITEM.DELETE': return Item.delete(state, action);\r\n    case 'ITEM.EDIT': return Item.edit(state, action);\r\n    case 'ITEMS.UPDATE': return updateItems(state, action);\r\n\r\n    case 'DISPLAYSETTINGS.TOGGLE': return DisplaySettings.toggle(state, action);\r\n    case 'DISPLAYSETTINGS.SAVE': return DisplaySettings.save(state, action);\r\n\r\n    case 'SORT.RUN': return Sort.run(state, action);\r\n    case 'SORT.TOGGLE': return Sort.toggle(state, action);\r\n\r\n    case 'SWITCH.TRANSFERS': return Switch.transfers(state, action);\r\n    case 'SWITCH.PORTFOLIOS': return Switch.portfolios(state, action);\r\n\r\n    case 'DELETE_SELECTED_ITEMS': return deleteSelectedItems(state, action);\r\n    case 'GO_TO_PAGE': return goToPage(state, action);\r\n    case 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION': return toggleActivePageRowSelection(state, action);\r\n    case 'TOGGLE_ITEM_BLOCK': return toggleItemBlock(state, action);\r\n    case 'TOGGLE_ROW_TOOLBAR': return toggleRowToolbar(state, action);\r\n    case 'TOGGLE_SELECT_ROW': return toggleSelectRow(state, action);\r\n    case 'TOGGLE_THROBBER': return toggleThrobber(state, action);\r\n    case 'SHIFT_CLICK': return shiftClick(state, action);\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default mainReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport { defaultState } from './store/defaultState'\r\nimport rootReducer from './store/reducers/mainReducer'\r\n\r\nimport { mSort } from './components/functions';\r\n\r\nconst getDefaultState = async () => {\r\n\tconst newItems = null;\r\n\t//const newItems = await getDataFromBack('/getportfolios/');  \r\n\r\n\tif (newItems) {\r\n\t\tdefaultState.items = newItems;\r\n\t} else {\r\n\t\tconsole.warn('Отсутствует подключение к БД, показаны тестовые данные.');\r\n\t}\r\n\r\n\tmSort(defaultState.items, defaultState.sortParams);\r\n\r\n\treturn defaultState;\r\n}\r\n\r\n//let preLoadedState = getDefaultState();\r\ngetDefaultState().then(result => {\r\n\tlet preLoadedState = result;\r\n\tconst store = createStore(\r\n\t\trootReducer, preLoadedState,\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t);\r\n\r\n\tReactDOM.render(\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>,\r\n\t\tdocument.getElementById('root')\r\n\t);\r\n});\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}