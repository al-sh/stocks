{"version":3,"sources":["components/functions.ts","components/analytics/Analytics.tsx","store/testData.ts","store/actions.ts","components/menu/MainMenu.tsx","components/RTable/ToolbarTop.tsx","components/RTable/TableBody/RowContent.jsx","components/RTable/TableBody/ToolbarRow.jsx","components/RTable/TableBody/ScrollerRow.jsx","components/RTable/TableBody/TableBody.jsx","components/RTable/TableFooter/PagerItem.jsx","components/RTable/TableFooter/TableFooter.jsx","components/RTable/TableHeader/HeadItem.tsx","components/RTable/TableHeader/TableHeader.tsx","components/RTable/ItemBlock.jsx","components/RTable/DisplaySettings.jsx","components/RTable/RTable.jsx","components/common/throbber/Throbber.jsx","App.js","serviceWorker.js","store/defaultState.ts","store/reducers/Analytics.ts","store/reducers/Item.ts","store/reducers/Sort.ts","store/reducers/DisplaySettings.ts","store/reducers/Switch.ts","store/reducers/mainReducer.ts","index.js"],"names":["findEl","arr","id","i","length","deleteItemFromArray","itemId","indexToDel","splice","getNewId","scData","newId","parseInt","getPageRows","items","pageNumber","rowsinPage","rowsCount","lastRowNum","rows","push","mSort","sortParams","singleCompare","a","b","currentSortParam","type","fieldName","ascOrder","first","isFinite","parseFloat","second","floatCompare","field","defaultCompare","sort","currentResult","maskAmount","x","parts","toString","split","replace","substring","join","getDataFromBack","url","fetch","response","ok","json","console","log","status","connector","connect","state","currentPortfolioValue","analytics","discountRate","NPV","irr","dispatch","p","close","props","show","onChangeCurrentPortfolioValue","e","target","value","onChangeDiscountRate","className","onClick","this","style","float","height","width","onChange","defaultValue","React","Component","testPortfolios","name","isActive","amount","undefined","testTransfers","currencyId","dt","Portfolio","Transfers","testDataWarnText","toggleThrobber","visible","showThrobber","sections","portfolios","backUrl","testItems","actionType","transfers","actSwitchToSection","sectionName","selectedSection","newItems","warn","currentSection","switchToTransfers","switchToPortfolios","settings","deleteSelectedItems","showItemBlock","showAddEditBlock","showDisplaySettings","showTransfersAnalytics","buttons","withCheckBoxes","key","RowContent","onChangeCheckBox","item","rowClick","event","shiftKey","rowId","columns","filter","column","TDs","checked","selected","text","format","shiftClickItemId","ToolbarRow","delete","edit","editItem","colSpan","col","ScrollerRow","data","Fragment","needShowToolbar","TableBody","nextProps","nextState","activePageRows","activePage","scRows","rowSelected","selectedItems","indexOf","toolBarRowId","PagerItem","goToPage","page","pageNum","PagerFiller","TableFooter","scPages","pagesCount","currentPage","pageItem","toggleSortParams","sortType","ctrlPressed","toggleVisualSort","ctrlKey","headerClassName","headerStyle","sortOrderClassName","sortIndex","isAllRowsSelectedInPage","allRowsSelected","cols","headItems","j","ItemBlock","save","elemToSave","onNameChange","setState","onStatusChange","defaultChecked","marginTop","DisplaySettings","onVisibleChange","Object","assign","getAttribute","onNeedCheckBoxesChange","onRowsPerPageChange","maxValue","columnSettings","htmlFor","colnumber","min","max","marginLeft","Rscroller","display","position","cellSpacing","Throbber","App","RTable","showAnalytics","Boolean","window","location","hostname","match","defaultState","textAlign","paddingRight","Analytics","toggle","action","stateCopy","newColumns","val","Date","toLocaleDateString","aData","now","daysCount","durationCoef","amountDisc","countItemAnalytics","reduce","sum","amountAll","amountAllXDuration","Item","add","Sort","selectedClause","sortParamsContainSelectedField","run","Switch","updateItems","toggleItemBlock","toggleSelectRow","toggleActivePageRowSelection","toggleRowToolbar","shiftClick","startItemIndex","endItemIndex","tmp","mainReducer","getDefaultState","then","result","preLoadedState","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f84a823.chunk.js","sourcesContent":["import { ISortParam } from '../store/interfaces';\r\n\r\n/*function formatDate(dt){ \r\n  const lPadZeros = value => { return value.toString().length===1?'0'+value:value }\r\n  \r\n  const year = dt.getFullYear();\r\n  const month = lPadZeros( dt.getMonth()+1 );\r\n  const day = lPadZeros( dt.getDate() );\r\n\r\n  const hours = lPadZeros( dt.getHours() );\r\n  const minutes = lPadZeros( dt.getMinutes() );\r\n  const seconds = lPadZeros( dt.getSeconds() );\r\n\r\n  return year + '-' + month + '-' + day + ' ' + hours + ':'+ minutes + ':' + seconds\r\n}\r\n\r\nfunction sendPOST(url, data) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"POST\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    console.log('POST Data:', data)\r\n    request.send(JSON.stringify(data));\r\n  });\r\n}*/\r\n\r\nfunction findEl(arr: any, id: number): number {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].id === id) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction deleteItemFromArray(arr: any, itemId: number): void {\r\n  const indexToDel: number = findEl(arr, itemId);\r\n  arr.splice(indexToDel, 1);\r\n}\r\n\r\nfunction getNewId(scData: any): number {\r\n  let newId: number = 0;\r\n\r\n  for (let i = 0; i < scData.length; i++) {\r\n    if (parseInt(scData[i].id) > newId) {\r\n      newId = scData[i].id;\r\n    }\r\n  }\r\n  return newId + 1;\r\n}\r\n\r\nfunction getPageRows(items: any, pageNumber: number, rowsinPage: number) {\r\n  const rowsCount = items.length;\r\n\r\n  const firstRowNum = pageNumber * rowsinPage;\r\n  let lastRowNum = (pageNumber + 1) * rowsinPage;\r\n  if (lastRowNum > rowsCount) lastRowNum = rowsCount;\r\n\r\n  let rows = [];\r\n  for (let i = firstRowNum; i < lastRowNum; i++) {\r\n    rows.push(items[i]);\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\n//на входе - json, в котором указано в каком порядке сортируется и сам scrollerData\r\n//на выходе - отсортированный scrollerData (изменяет текущий)\r\n//const mSort = (scData, sortParams) => { \r\nfunction mSort(scData: any, sortParams: ISortParam[]) {\r\n  const defaultCompare = (a: any, b: any, fieldName: string, ascOrder: boolean) => {\r\n    if (a[fieldName] > b[fieldName]) {\r\n      return ascOrder ? 1 : -1;\r\n    }\r\n    if (a[fieldName] < b[fieldName]) {\r\n      return ascOrder ? -1 : 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const floatCompare = (a: any, b: any, fieldName: string, ascOrder: boolean) => {\r\n    const first = isFinite(parseFloat(a[fieldName])) ? parseFloat(a[fieldName]) : 0;\r\n    const second = isFinite(parseFloat(b[fieldName])) ? parseFloat(b[fieldName]) : 0;\r\n\r\n    if (first > second) {\r\n      return ascOrder ? 1 : -1;\r\n    }\r\n    if (first < second) {\r\n      return ascOrder ? -1 : 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const singleCompare = (a: any, b: any, currentSortParam: ISortParam) => {\r\n    if (currentSortParam.type === 'float') {\r\n      return floatCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n    if (currentSortParam.type === 'default') {\r\n      return defaultCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n  }\r\n\r\n  const compareFunction = (a: any, b: any) => {\r\n    let currentSortParam;\r\n\r\n    for (let i = 0; i < sortParams.length; i++) {\r\n      currentSortParam = sortParams[i];\r\n      const currentResult = singleCompare(a, b, currentSortParam);\r\n      if (currentResult !== 0) {\r\n        return currentResult;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  return scData.sort(compareFunction);\r\n}\r\n\r\nfunction maskAmount(x: any) {\r\n  if (!isFinite(x)) {\r\n    return '';\r\n  }\r\n\r\n  var parts = x.toString().split(\".\");\r\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  parts[1] = parts[1] ? parts[1].substring(0, 2) : '00';\r\n  return parts.join(\".\");\r\n}\r\n\r\n/*async function getDataFromBack(url) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    request.send();\r\n  });\r\n}*/\r\n\r\nasync function getDataFromBack(url: string) {\r\n  let response = await fetch(url);\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else {\r\n    console.log(\"Ошибка HTTP: \" + response.status);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { findEl, mSort, getNewId, getPageRows, deleteItemFromArray, maskAmount, getDataFromBack };","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { IState } from '../../store/interfaces';\r\nimport { maskAmount } from '../../components/functions';\r\n\r\nconst mapState = (state: IState) => {\r\n  return {\r\n    currentPortfolioValue: state.analytics.currentPortfolioValue,\r\n    discountRate: state.analytics.discountRate,\r\n    NPV: state.analytics.NPV,\r\n    irr: state.analytics.irr\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    dispatch: (p: any) => { dispatch(p) }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype IPropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface IAnalyticsProps extends IPropsFromRedux {\r\n  currentPortfolioValue: any,\r\n  discountRate: any,\r\n  NPV: number,\r\n  irr: number\r\n}\r\n\r\n\r\nclass Analytics extends React.Component<IAnalyticsProps, IState>{\r\n  close = () => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TOGGLE',\r\n      show: false\r\n    });\r\n  }\r\n\r\n  onChangeCurrentPortfolioValue = (e: any) => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TRANSFERS',\r\n      currentPortfolioValue: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeDiscountRate  = (e: any) => {\r\n    console.log(e.target.value);\r\n\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TRANSFERS',\r\n      discountRate: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Analytics\">\r\n          <button onClick={this.close} className=\"toolbarButton\" style={{ float: 'right', height: '25px', width: '25px' }}>X</button>\r\n          <div>\r\n            <span className=\"Analytics__Label\">Ставка дисконтирования:</span>\r\n            <input id=\"discountRateInput\" onChange={this.onChangeDiscountRate} type=\"text\" defaultValue={this.props.discountRate} />\r\n          </div>\r\n          <div>\r\n            <span className=\"Analytics__Label\">NPV:</span>\r\n            <span>{this.props.NPV}</span>\r\n          </div>\r\n          <div>\r\n            <span className=\"Analytics__Label\">Оценка активов:</span>\r\n            <input id=\"portfolioValueInput\" onChange={this.onChangeCurrentPortfolioValue} type=\"text\" defaultValue={this.props.currentPortfolioValue} />\r\n          </div>\r\n          <div>\r\n            <span className=\"Analytics__Label\">Доходность:</span>\r\n            <span>{maskAmount(this.props.irr*100)}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connector(Analytics)","import { IPortfolio, ITransfer } from './interfaces';\r\n\r\nconst testPortfolios: IPortfolio[] = [\r\n    { id: 1, name: 'Открытие Брокер', isActive: true, amount: 100500 },\r\n    { id: 2, name: 'Финам', isActive: true, amount: 35000 },\r\n    { id: 3, name: 'Тинькофф Инвестиции', isActive: true, amount: 120000 },\r\n    { id: 4, name: 'Сбербанк', isActive: true, amount: 17000 },\r\n    { id: 5, name: 'ВТБ Капитал', isActive: true, amount: 17000 },\r\n    { id: 6, name: 'БКС Брокер', isActive: false, amount: undefined },\r\n    { id: 7, name: 'ИК Фридом Финанс', isActive: true, amount: 17000 },\r\n    { id: 8, name: 'Fidelity', isActive: true, amount: 17000 },\r\n    { id: 9, name: 'Interactive brokers', isActive: true, amount: 800000 },\r\n    { id: 10, name: 'TD Ameritrade', isActive: false }\r\n];\r\n\r\nexport const testTransfers: ITransfer[] = [\r\n    { id: 1, currencyId: 1, dt: \"2018-08-20T14:00:00.000Z\", amount: 60000, Portfolio: testPortfolios[0] },\r\n    { id: 2, currencyId: 1, dt: \"2018-08-27T14:00:00.000Z\", amount: 190000, Portfolio: testPortfolios[0] },\r\n    { id: 3, currencyId: 1, dt: \"2018-12-03T14:00:00.000Z\", amount: 50000, Portfolio: testPortfolios[0] },\r\n    { id: 4, currencyId: 1, dt: \"2018-12-10T14:00:00.000Z\", amount: 50000, Portfolio: testPortfolios[0] },\r\n];\r\n\r\ntestPortfolios[0].Transfers = testTransfers;\r\n\r\nexport { testPortfolios }","import { testPortfolios, testTransfers } from './testData'\r\nimport { getDataFromBack } from '../components/functions';\r\n\r\nconst testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\nexport function toggleVisualSort(fieldName: string, sortType: string, ctrlPressed: boolean) {\r\n    return { type: 'SORT.TOGGLE', field: fieldName, sortType: sortType, ctrlPressed: ctrlPressed }\r\n}\r\n\r\nfunction toggleThrobber(dispatch: any, visible: boolean) {\r\n    dispatch({\r\n        type: 'TOGGLE_THROBBER',\r\n        showThrobber: visible\r\n    });\r\n}\r\n\r\nconst sections: any = {\r\n    portfolios: {\r\n        backUrl: '/getportfolios',\r\n        testItems: testPortfolios,\r\n        actionType: 'SWITCH.PORTFOLIOS'\r\n    },\r\n    transfers: {\r\n        backUrl: '/transfers.getall',\r\n        testItems: testTransfers,\r\n        actionType: 'SWITCH.TRANSFERS'\r\n    }\r\n}\r\n\r\nexport async function actSwitchToSection(sectionName: string, dispatch: any) {\r\n    toggleThrobber(dispatch, true);\r\n\r\n    const selectedSection = sections[sectionName];\r\n    let newItems = await getDataFromBack(selectedSection.backUrl);\r\n    if (!newItems) {\r\n        console.warn(testDataWarnText);\r\n        newItems = selectedSection.testItems;\r\n    }\r\n    console.log(newItems);\r\n\r\n    dispatch({\r\n        type: selectedSection.actionType,\r\n        items: newItems\r\n    });\r\n    toggleThrobber(dispatch, false);\r\n}","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport {actSwitchToSection} from '../../store/actions' \r\nimport { IState } from '../../store/interfaces'\r\n\r\nconst mapState = (state: IState) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nconst mapDispatch = null;\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface ReduxProps {\r\n  dispatch: any\r\n}\r\n\r\ninterface MainMenuProps extends ReduxProps {\r\n  currentSection: string\r\n}\r\n\r\nclass MainMenu extends React.Component<MainMenuProps, IState> {\r\n  testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\n  switchToTransfers = async (e: any) => {\r\n    actSwitchToSection('transfers', this.props.dispatch);\r\n  }\r\n\r\n  switchToPortfolios = async (e: any) => {\r\n    actSwitchToSection('portfolios', this.props.dispatch);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"MainMenu\">\r\n        <span onClick={this.switchToTransfers} className={this.props.currentSection==='transfers'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Зачисления</span>\r\n        <span onClick={this.switchToPortfolios} className={this.props.currentSection==='portfolios'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Портфели</span>       \r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nexport default connector(MainMenu)","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { IState } from '../../store/interfaces';\r\n\r\nconst mapState = (state: IState) => {\r\n  return {\r\n    currentSection: state.currentSection,\r\n    settings: state.settings\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    dispatch: (p: any) => { dispatch(p) }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype IPropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nclass ToolbarTop extends React.Component<IPropsFromRedux, IState> {\r\n  deleteSelectedItems = () => {\r\n    this.props.dispatch({\r\n      type: 'DELETE_SELECTED_ITEMS'\r\n    });\r\n  }\r\n\r\n  showItemBlock = () => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true\r\n    });\r\n  }\r\n\r\n  showDisplaySettings = () => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: true\r\n    });\r\n  }\r\n\r\n  showTransfersAnalytics = () => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TRANSFERS',\r\n      showDisplaySettings: true,\r\n      discountRate: 6\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const buttons = [];\r\n    if (this.props.settings.withCheckBoxes){\r\n      buttons.push(<button key=\"btnDel\" onClick={this.deleteSelectedItems} className=\"toolbarButton\">Удалить</button>);\r\n    }\r\n    //buttons.push(<button key=\"btnAdd\" onClick={this.showItemBlock} className=\"toolbarButton\">Добавить</button>);\r\n    buttons.push(<button key=\"btnSettings\" onClick={this.showDisplaySettings} className=\"toolbarButton\">Настройка</button>);\r\n    if (this.props.currentSection === 'transfers') {\r\n      buttons.push(<button key=\"transfers_Analytics\" onClick={this.showTransfersAnalytics} className=\"toolbarButton\">Аналитика</button>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"ToolbarTop\">\r\n        {buttons}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connector(ToolbarTop)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass RowContent extends React.Component {\r\n  onChangeCheckBox = () => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_SELECT_ROW',\r\n      item: this.props.item\r\n    });\r\n  }\r\n\r\n  rowClick  = (event) => {     \r\n    if (event.target.name==='rowCheck') return;  \r\n    if (event.shiftKey) { \r\n      this.props.dispatch({\r\n        type: 'SHIFT_CLICK',\r\n        rowId: this.props.item.id\r\n      }); \r\n      return; \r\n    }  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const item = this.props.item;\r\n    const columns = this.props.columns.filter(column => column.visible);\r\n\r\n    const TDs = [];\r\n    if (this.props.withCheckBoxes) {\r\n      TDs.push(<td key={\"td_checkBox_itemId_\"+item.id}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.props.selected}/></td>);\r\n    }\r\n\r\n    for (let i=0; i<columns.length; i++){       \r\n      let text = '';\r\n      if (columns[i].format) {\r\n        text = columns[i].format( item[columns[i].field] ); \r\n      } else { \r\n        if (item[columns[i].field]) text = item[columns[i].field].toString(); \r\n      } \r\n      TDs.push(<td key={\"td_itemId_\"+item.id+'_col_'+i} style={columns[i].style} >{ text }</td>);\r\n    }\r\n    \r\n    return (      \r\n      <tr key={item.id} className={this.props.selected?'rowSel':''} onClick={this.rowClick}>\r\n        {TDs}\r\n      </tr>          \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n  return {\r\n    columns: state.columns,\r\n    items: state.items,\r\n    withCheckBoxes: state.settings.withCheckBoxes,    \r\n    shiftClickItemId: state.settings.shiftClickItemId    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RowContent)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ToolbarRow extends React.Component {\r\n\r\n  delete  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'ITEM.DELETE',\r\n      itemId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  edit  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true,\r\n      editItem: this.props.item\r\n    });\r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td colSpan={this.props.columns.filter(col => col.visible).length}>\r\n          <button onClick={this.delete} className=\"toolbarButton\">Удалить</button>\r\n          <button onClick={this.edit} className=\"toolbarButton\">Редактировать</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    columns: state.columns\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ToolbarRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport RowContent from './RowContent';\r\nimport ToolbarRow from './ToolbarRow';\r\n\r\nclass ScrollerRow extends React.Component { \r\n  render() {\r\n    const item = this.props.data;\r\n    \r\n    return (\r\n      <React.Fragment> \r\n        <RowContent key={item.id} item={item} selected={this.props.selected} /> \r\n        { this.props.needShowToolbar ? <ToolbarRow item={item} /> : null }\r\n      </React.Fragment>    \r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null)(ScrollerRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ScrollerRow from './ScrollerRow';\r\n\r\nimport {getPageRows} from '../../functions';\r\n\r\nclass TableBody extends React.Component { \r\n  shouldComponentUpdate(nextProps, nextState){\r\n    //console.log('shouldComponentUpdate old props', this.props, 'nextProps:', nextProps);\r\n    return true;\r\n  } \r\n\r\n  render() {   \r\n    const items = this.props.items;    \r\n    const activePage = this.props.activePage;\r\n    const rowsinPage = this.props.rowsinPage;\r\n      \r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n    const scRows = [];  \r\n    \r\n    for (let i=0; i<activePageRows.length; i++){     \r\n      const rowSelected = ~this.props.selectedItems.indexOf(activePageRows[i].id)?true:false;     \r\n      const needShowToolbar = (this.props.toolBarRowId===activePageRows[i].id);\r\n      scRows.push(<ScrollerRow key={'scrollerRow_'+i} data={activePageRows[i]} selected={rowSelected} needShowToolbar={needShowToolbar} />);\r\n    }\r\n    \r\n    return (\r\n      <tbody>              \r\n        {scRows}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.items,\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,  \r\n    toolBarRowId: state.settings.toolBarRowId,  \r\n    selectedItems: state.selectedItems    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TableBody)","import React from 'react';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerItem extends React.Component {\r\n  goToPage  = (page) => {       \r\n    this.props.dispatch({\r\n      type: 'GO_TO_PAGE',\r\n      page: this.props.data.pageNum\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n   \r\n    return (\r\n      <span onClick={this.goToPage} className={this.props.isActive?'activePage':''}>\r\n        {data.pageNum+1}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, null)(PagerItem)","import React from 'react';\r\nimport PagerItem from './PagerItem';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerFiller extends React.Component {\r\n  render() {   \r\n    return (\r\n      <span className=\"pagerFiller\">\r\n        ...\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass TableFooter extends React.Component {  \r\n  render() {    \r\n    const rowsinPage = this.props.rowsinPage;\r\n    const rowsCount = this.props.rowsCount;\r\n    const activePage = this.props.activePage;\r\n\r\n    const scPages = [];  \r\n    let pagesCount = ((rowsCount - rowsCount % rowsinPage) / rowsinPage);  \r\n    if (rowsCount % rowsinPage > 0) {\r\n      pagesCount = pagesCount + 1;\r\n    }\r\n    \r\n    const nearPagesCount = 2;\r\n    for(let i=0; i < pagesCount; i++){ \r\n      let currentPage = {};\r\n      currentPage.pageNum = i; \r\n      let pageItem = <PagerItem key={'pg'+currentPage.pageNum} data={currentPage} isActive={activePage===i?true:false} />;\r\n\r\n      if (pagesCount>10) { //показываем только часть страниц\r\n        if ( (i===0) && (i < activePage - nearPagesCount) ){//первая страница\r\n          scPages.push(pageItem);\r\n          if (activePage - nearPagesCount !== 1) {  //чтобы не отображать филлер, если следующая страница - вторая\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }         \r\n        }       \r\n        if ( (i >= activePage - nearPagesCount) && (i <= activePage + nearPagesCount) ) {\r\n          scPages.push(pageItem);\r\n        }\r\n        \r\n        if ( (i===pagesCount-1) && (i > activePage + nearPagesCount) ){//последняя страница\r\n          if (activePage + nearPagesCount !== pagesCount-2){ //чтобы не отображать филлер, если предыдущая страница - предпоследняя\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }          \r\n          scPages.push(pageItem);\r\n        }        \r\n      } else {\r\n        scPages.push(pageItem);\r\n      }      \r\n    }\r\n\r\n    //return scPages;\r\n    return <div className=\"pageBlock\">{scPages}</div>     \r\n  } \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    rowsCount: state.items.length\r\n  }\r\n}\r\n\r\n//export default TableFooter;\r\nexport default connect(mapStateToProps)(TableFooter)","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { toggleVisualSort } from '../../../store/actions';\r\nimport { IColumn, IState } from '../../../store/interfaces'\r\n\r\nconst mapState = (state: IState) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    toggleSortParams: (field: string, sortType: string, ctrlPressed: boolean) => {\r\n      dispatch( toggleVisualSort(field, sortType, ctrlPressed) )\r\n    }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface HeadItemProps extends PropsFromRedux, IColumn {\r\n  headerStyle?: any\r\n  sortIndex?: number,  \r\n  sortOrderClassName?: string,\r\n}\r\n\r\nclass HeadItem extends React.Component<HeadItemProps, IState> {  \r\n  sort  = (event: any) => {  \r\n    const sortType = this.props.type?this.props.type:'default';\r\n    const field = this.props.field; \r\n    const ctrlPressed = event.ctrlKey;\r\n    this.props.toggleSortParams(field, sortType, ctrlPressed);\r\n  }\r\n\r\n  render(){\r\n    return (      \r\n      <td className={this.props.headerClassName} style={this.props.headerStyle} >\r\n        <span className=\"sortHeader\" onClick={this.sort}>{this.props.text}</span>        \r\n        <span className={this.props.sortOrderClassName}></span>\r\n        <span className=\"sortNumber\">{this.props.sortIndex}</span>\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connector(HeadItem)","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport HeadItem from './HeadItem';\r\nimport { getPageRows } from '../../functions';\r\nimport { IColumn, IState } from '../../../store/interfaces';\r\n\r\nconst mapState = (state: IState) => {\r\n  return {\r\n    columns: state.columns,\r\n    items: state.items,\r\n    page: state.settings.activePage,\r\n    withCheckBoxes: state.settings.withCheckBoxes,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    selectedItems: state.selectedItems,\r\n    sortParams: state.sortParams\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch: any) => {\r\n  return {\r\n    dispatch: (p: any) => { \r\n      dispatch(p) \r\n    }\r\n  }\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\ntype IPropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ninterface ITableHeaderProps extends IPropsFromRedux {\r\n}\r\n\r\nclass TableHeader extends React.Component<ITableHeaderProps, IState>{\r\n  onChangeCheckBox = (event: any) => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION',\r\n      selected: event.target.checked\r\n    });\r\n  }\r\n\r\n  isAllRowsSelectedInPage = () => {\r\n    const items = this.props.items;\r\n    const activePage = this.props.page;\r\n    const rowsinPage = this.props.rowsinPage;\r\n\r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n\r\n    let allRowsSelected = true;\r\n    for (let i = 0; i < activePageRows.length; i++) {\r\n      if (this.props.selectedItems.indexOf(activePageRows[i].id) === -1) {\r\n        allRowsSelected = false;\r\n      }\r\n    }\r\n\r\n    if (activePageRows.length === 0) { allRowsSelected = false; }\r\n\r\n    return allRowsSelected;\r\n  }\r\n\r\n  render() {\r\n    //console.log('tableHeader - render');\r\n    const sortParams = this.props.sortParams;\r\n    const columns: IColumn[] = this.props.columns.filter((column: IColumn) => column.visible);\r\n\r\n    const cols = [];\r\n    const headItems = [];\r\n\r\n    if (this.props.withCheckBoxes) {\r\n      cols.push(<col key={\"col_cb\"} width=\"50\" />);\r\n      headItems.push(<td key={\"headItem_cb\"}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.isAllRowsSelectedInPage()} /></td>);\r\n    }\r\n\r\n    for (let i = 0; i < columns.length; i++) {\r\n      let sortIndex, sortOrderClassName;\r\n      if (sortParams.length > 0) {\r\n        for (let j = 0; j < sortParams.length; j++) {\r\n          if (sortParams[j].field === columns[i].field) {\r\n            sortIndex = j + 1;\r\n            sortOrderClassName = sortParams[j].ascOrder ? 'sortArrowUp' : 'sortArrowDown';\r\n          }\r\n        }\r\n\r\n      }\r\n      cols.push(<col key={\"col_\" + i} width={columns[i].width} />);\r\n      headItems.push(<HeadItem key={\"headItem_\" + i} field={columns[i].field} type={columns[i].type} visible={columns[i].visible}\r\n        headerClassName={columns[i].headerClassName} headerStyle={columns[i].headerStyle}\r\n        text={columns[i].text} sortIndex={sortIndex} sortOrderClassName={sortOrderClassName} />);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <colgroup>\r\n          {cols}\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            {headItems}\r\n          </tr>\r\n        </thead>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connector(TableHeader)","import React from 'react';\r\nimport {getNewId} from '../functions';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass ItemBlock extends React.Component { \r\n  state = { \r\n    id:  this.props.editItem?this.props.editItem.id:0, \r\n    name:  this.props.editItem?this.props.editItem.name:\"Название\",   \r\n    isActive: this.props.editItem?this.props.editItem.isActive:false\r\n  }   \r\n\r\n  save  = (p) => { \r\n    let elemToSave = {};\r\n    \r\n    elemToSave.id = this.state.id;    \r\n    elemToSave.name = this.state.name;    \r\n    elemToSave.isActive = this.state.isActive;  \r\n    \r\n    console.log(elemToSave);\r\n    if (this.props.editItem) {\r\n      this.props.dispatch({\r\n        type: 'ITEM.EDIT',\r\n        item: elemToSave\r\n      });\r\n    } else {\r\n      elemToSave.id = getNewId(this.props.items);\r\n      this.props.dispatch({\r\n        type: 'ITEM.ADD',\r\n        item: elemToSave\r\n      });\r\n       /*accountsendPOST('/addportfolio', elemToSave).then(response => {\r\n      RscrollerFunctions.toggleAddEditBlock(false);\r\n      RscrollerFunctions.refresh(true);\r\n      });*/\r\n    }\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n  \r\n  onNameChange = (e) => {    \r\n    this.setState({name: e.target.value});   \r\n  }\r\n  \r\n  onStatusChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({isActive: e.target.checked});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    let item = {};\r\n\r\n    if (this.props.editItem) {  \r\n      item = this.props.editItem;  \r\n    } else {\r\n      item.name = 'Название1';    \r\n      item.isActive = false;\r\n    }     \r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>\r\n          <span className=\"itemBlock__label\">Название:</span>\r\n          <input id=\"fio\" onChange={this.onNameChange} type=\"text\" defaultValue={item.name} />\r\n        </div>        \r\n        <div>\r\n          <span className=\"itemBlock__label\">Активный</span>\r\n          <input id=\"status\" onChange={this.onStatusChange} type=\"checkbox\" defaultChecked={item.isActive} />           \r\n        </div>  \r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    items: state.items,\r\n    editItem: state.settings.editItem\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemBlock)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DisplaySettings extends React.Component { //на будущее, можно добавить количество строк на странице для выбора\r\n  state = { \r\n    columns:  this.props.columns,\r\n    rowsinPage: this.props.rowsinPage,\r\n    withCheckBoxes: this.props.withCheckBoxes\r\n  }   \r\n\r\n  save  = (p) => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.SAVE',\r\n      columns: this.state.columns,\r\n      rowsinPage: this.state.rowsinPage,\r\n      withCheckBoxes: this.state.withCheckBoxes\r\n    });\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: false\r\n    });\r\n  }\r\n  \r\n  onVisibleChange = (e) => {\r\n    let columns = Object.assign([], this.state.columns);   \r\n    columns[e.target.getAttribute('colnumber')].visible = e.target.checked;\r\n    this.setState({columns: columns});   \r\n  }\r\n\r\n  onNeedCheckBoxesChange = (e) => {\r\n    this.setState({withCheckBoxes: e.target.checked});   \r\n  }\r\n\r\n  onRowsPerPageChange = (e) => {\r\n    const value = parseInt(e.target.value);  \r\n    const maxValue = parseInt( e.target.getAttribute('max') );\r\n\r\n    if (value > maxValue) {      \r\n      e.target.value = maxValue;     \r\n    }  \r\n    this.setState({rowsinPage: value});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    const columns = this.props.columns;\r\n    let columnSettings = [];\r\n    for (let i=0; i<columns.length; i++){\r\n      columnSettings.push(\r\n        <div key={\"columnSettings_\"+i}>\r\n          <label htmlFor={\"columnSettingsInp_\"+i}>{columns[i].text}</label>\r\n          <input id={\"columnSettingsInp_\"+i} colnumber={i} field={columns[i].field} onChange={this.onVisibleChange} type=\"checkbox\" defaultChecked={columns[i].visible} />  \r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>Настройка отображения полей</div>\r\n        {columnSettings}\r\n        <div>\r\n          <span>Количество строк на странице:</span>\r\n          <input type=\"number\" min={1} max={100} name=\"rowsPerPage\" onChange={this.onRowsPerPageChange} defaultValue={this.props.rowsinPage}\r\n                 style={ {marginLeft: '10px', width: '50px'} } />\r\n        </div>\r\n        <div>\r\n          <label htmlFor={'inp_needCheckBoxes'}>Чекбоксы</label>\r\n          <input id={'inp_needCheckBoxes'} type=\"checkbox\" onChange={this.onNeedCheckBoxesChange} defaultChecked={this.props.withCheckBoxes} />\r\n        </div>\r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    columns: state.columns,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    withCheckBoxes: state.settings.withCheckBoxes\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DisplaySettings)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ToolbarTop from './ToolbarTop';\r\nimport TableBody from './TableBody/TableBody';\r\nimport TableFooter from './TableFooter/TableFooter';\r\nimport TableHeader from './TableHeader/TableHeader';\r\n\r\n//custom components\r\nimport ItemBlock from './ItemBlock';\r\nimport DisplaySettings from './DisplaySettings';\r\n\r\nclass Rscroller extends React.Component { \r\n  render() {     \r\n    return (\r\n      <div style={{display: 'inline-block', position: 'relative' }}>\r\n        { this.props.showAddEditBlock ? <ItemBlock /> : null }\r\n        { this.props.showDisplaySettings ? <DisplaySettings /> : null }\r\n        <div className=\"rScroller\">\r\n          <div className=\"rScrollerHeader\">\r\n            <ToolbarTop />\r\n          </div>          \r\n          <table cellSpacing=\"0\">  \r\n            <TableHeader />\r\n            <TableBody />            \r\n          </table>            \r\n          <TableFooter />\r\n        </div>        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    showAddEditBlock: state.settings.showAddEditBlock,\r\n    showDisplaySettings: state.settings.showDisplaySettings\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps, //mapStateToProps\r\n  null //mapDispatchToProps\r\n)(Rscroller)","import React from 'react';\r\n\r\nclass Throbber extends React.Component {\r\n    render(){\r\n        return (      \r\n            <div className=\"Throbber\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Throbber;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport Analytics from './components/analytics/Analytics';\r\nimport MainMenu from './components/menu/MainMenu';\r\nimport RTable from './components/RTable/RTable';\r\nimport Throbber from './components/common/throbber/Throbber';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <MainMenu />\r\n        {this.props.showThrobber ? <Throbber /> : <RTable />}\r\n        {this.props.showAnalytics ? <Analytics /> : null }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    showThrobber: state.showThrobber,\r\n    showAnalytics: state.analytics.show\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null //mapDispatchToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { testPortfolios } from './testData'\r\nimport { IState } from './interfaces'\r\nimport { maskAmount } from '../components/functions';\r\n\r\nexport const defaultState: IState = {\r\n    analytics: {\r\n        currentPortfolioValue: 400000,\r\n        discountRate: 6,\r\n        NPV: 0,\r\n        irr: 0,\r\n    }, \r\n    currentSection: 'portfolios',\r\n    columns: [\r\n        {\r\n            width: '200px',\r\n            field: 'name',\r\n            text: 'Название',\r\n            visible: true\r\n        },\r\n        {\r\n            width: '160px',\r\n            field: 'isActive',\r\n            text: 'Статус',\r\n            format: (isActive: boolean) => { return isActive ? 'Активный' : 'Не активный'; },\r\n            visible: true\r\n        },\r\n        {\r\n            width: '150px',\r\n            field: 'amount',\r\n            text: 'Сумма',\r\n            type: 'float',\r\n            headerClassName: 'header-amount',\r\n            style: { textAlign: 'right', paddingRight: '15px' },\r\n            format: maskAmount,\r\n            visible: true\r\n        }\r\n    ],\r\n    items: testPortfolios,\r\n    selectedItems: [],\r\n    settings: {\r\n        rowsinPage: 5,\r\n        activePage: 0,\r\n        withCheckBoxes: false,\r\n        showDisplaySettings: false,\r\n        showAddEditBlock: false,\r\n        editItem: null,\r\n        shiftClickItemId: null,\r\n        toolBarRowId: null\r\n    },\r\n    showThrobber: false,\r\n    sortParams: [{ field: \"name\", type: \"default\", ascOrder: true }]\r\n};","import { maskAmount } from '../../components/functions';\r\nimport { IColumn, IPortfolio, IState } from '../interfaces';\r\n\r\nconst Analytics = {\r\n\ttoggle: (state: IState, action: any): IState => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.analytics.show = action.show;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n\ttransfers: (state: IState, action: any): IState => {\r\n\t\tconst discountRate: number = action.discountRate ? action.discountRate : state.analytics.discountRate;\r\n\t\tconst currentPortfolioValue: number = action.currentPortfolioValue ? action.currentPortfolioValue : state.analytics.currentPortfolioValue;\r\n\r\n\t\tfunction countItemAnalytics(aData: any) {\r\n\t\t\tfor (let i = 0; i < aData.length; i++) {\r\n\t\t\t\tconst item = aData[i];\r\n\t\t\t\tconst dt: any = new Date(item.dt);\r\n\t\t\t\tconst now: any = new Date();\r\n\t\t\t\titem.daysCount = (now - dt) / (1000 * 60 * 60 * 24);\r\n\t\t\t\titem.durationCoef = item.daysCount / 366;\r\n\t\t\t\titem.amountDisc = item.amount * (1 + discountRate / 100 * item.durationCoef);\r\n\t\t\t}\r\n\r\n\t\t\treturn aData;\r\n\t\t}\r\n\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tif (stateCopy.currentSection !== 'transfers') {\r\n\t\t\tconsole.warn('Аналитика пока доступна только для зачислений');\r\n\t\t\treturn stateCopy;\r\n\t\t}\r\n\r\n\t\tstateCopy.analytics.show = true;\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '100px',\r\n\t\t\t\tfield: 'dt',\r\n\t\t\t\ttext: 'Дата',\r\n\t\t\t\tformat: (val: any) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '200px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Портфель',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '120px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'amount',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '140px',\r\n\t\t\t\tfield: 'daysCount',\r\n\t\t\t\ttext: 'Кол-во дней',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '120px',\r\n\t\t\t\tfield: 'amountDisc',\r\n\t\t\t\ttext: 'Под ' + discountRate + ' %',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tcountItemAnalytics(stateCopy.items);\r\n\t\tstateCopy.analytics.NPV = maskAmount(stateCopy.items.reduce((sum: number, item: any) => { return sum + item.amountDisc }, 0));\r\n\t\tstateCopy.analytics.amountAll = stateCopy.items.reduce((sum: number, item: any) => { return sum + item.amount }, 0);\r\n\t\tlet amountAllXDuration = stateCopy.items.reduce((sum: number, item: any) => { return sum + item.amount * item.durationCoef }, 0)\r\n\t\tstateCopy.analytics.irr = (currentPortfolioValue - stateCopy.analytics.amountAll) / amountAllXDuration;\r\n\r\n\t\tstateCopy.settings.activePage = 0;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n}\r\n\r\nexport default Analytics","import { mSort, deleteItemFromArray } from '../../components/functions';\r\n\r\nconst Item = { //функции работы с элементом списка\r\n  add: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n    items.push(action.item);\r\n\r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;\r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  },\r\n\r\n  edit: (state: any, action: any) => {\r\n    //let stateCopy = getObjCopy(state);\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n\r\n    deleteItemFromArray(items, action.item.id);\r\n    items.push(action.item);\r\n\r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;\r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  },\r\n\r\n  delete: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let items = Object.assign([], stateCopy.items);\r\n\r\n    deleteItemFromArray(items, action.itemId);\r\n\r\n    stateCopy.selectedItems = [];\r\n    stateCopy.items = items;\r\n    return stateCopy;\r\n  }\r\n\r\n}\r\n\r\nexport default Item","import { mSort } from '../../components/functions';\r\nimport { ISortParam } from '../interfaces';\r\n\r\nconst Sort = {\r\n  toggle: (state: any, action: any) => {\r\n    const selectedClause = {\r\n      field: action.field,\r\n      type: action.sortType,\r\n      ascOrder: true\r\n    };\r\n\r\n    let stateCopy = Object.assign({}, state);\r\n    let sortParams: ISortParam[] = Object.assign([], stateCopy.sortParams);\r\n\r\n    if (sortParams.length > 0) {\r\n      if (sortParams[0].field === selectedClause.field) {\r\n        selectedClause.ascOrder = !sortParams[0].ascOrder;\r\n      }\r\n    }\r\n\r\n    if (action.ctrlPressed) {\r\n      let sortParamsContainSelectedField = false;\r\n      for (let i = 0; i < sortParams.length; i++) {\r\n        if (sortParams[i].field === selectedClause.field) {\r\n          //смена порядка сортировки по заданному полю в случае ctrl+click          \r\n          selectedClause.ascOrder = !sortParams[i].ascOrder;\r\n          sortParams[i] = selectedClause;\r\n          sortParamsContainSelectedField = true;\r\n        }\r\n      }\r\n\r\n      if (!sortParamsContainSelectedField) {\r\n        sortParams.push(selectedClause);\r\n      }\r\n    } else {\r\n      sortParams = [];\r\n      sortParams.push(selectedClause);\r\n    }\r\n\r\n    let newItems = Object.assign([], stateCopy.items);\r\n    mSort(newItems, sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    stateCopy.sortParams = sortParams;\r\n\r\n    return stateCopy;\r\n  },\r\n\r\n  run: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    let newItems = Object.assign([], stateCopy.items);\r\n\r\n    mSort(newItems, stateCopy.sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    return stateCopy;\r\n  }\r\n}\r\n\r\nexport default Sort","const DisplaySettings = {\r\n  toggle: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    stateCopy.settings.showDisplaySettings = action.showDisplaySettings;\r\n    return stateCopy;\r\n  },\r\n\r\n  save: (state: any, action: any) => {\r\n    let stateCopy = Object.assign({}, state);\r\n    stateCopy.columns = action.columns;\r\n    stateCopy.settings.rowsinPage = action.rowsinPage;\r\n    stateCopy.settings.withCheckBoxes = action.withCheckBoxes;\r\n    stateCopy.settings.showDisplaySettings = false;\r\n    stateCopy.settings.activePage = 0;\r\n    return stateCopy;\r\n  }\r\n}\r\n\r\nexport default DisplaySettings","import { maskAmount } from '../../components/functions';\r\nimport { IColumn, IPortfolio, ITransfer } from '../interfaces';\r\n\r\nconst Switch = {\r\n\r\n\ttransfers: (state: any, action: any) => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.currentSection = 'transfers';\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '100px',\r\n\t\t\t\tfield: 'dt',\r\n\t\t\t\ttext: 'Дата',\r\n\t\t\t\tformat: (val: any) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '200px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Портфель',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'Portfolio',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (Portfolio: IPortfolio) => { return Portfolio.isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'amount',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t//const newItems = await getDataFromBack('/transfers.getall');  \r\n\t\t//console.log(newItems);\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tstateCopy.items = action.items;\r\n\r\n\t\tstateCopy.page = 0;\r\n\t\treturn stateCopy;\r\n\t},\r\n\r\n\tportfolios: (state: any, action: any) => {\r\n\t\tlet stateCopy = Object.assign({}, state);\r\n\t\tstateCopy.currentSection = 'portfolios';\r\n\t\tconst newColumns: IColumn[] = [\r\n\t\t\t{\r\n\t\t\t\twidth: '250px',\r\n\t\t\t\tfield: 'name',\r\n\t\t\t\ttext: 'Название',\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '160px',\r\n\t\t\t\tfield: 'isActive',\r\n\t\t\t\ttext: 'Статус',\r\n\t\t\t\tformat: (isActive: boolean) => { return isActive ? 'Активный' : 'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\twidth: '150px',\r\n\t\t\t\tfield: 'Transfers',\r\n\t\t\t\ttext: 'Сумма',\r\n\t\t\t\ttype: 'float',\r\n\t\t\t\tstyle: { textAlign: 'right', paddingRight: '15px' },\r\n\t\t\t\tformat: (Transfers: ITransfer[]) => {\r\n\t\t\t\t\tif (Transfers) {\r\n\t\t\t\t\t\treturn maskAmount(Transfers.reduce((sum, item) => { return sum + item.amount }, 0))\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t]\r\n\r\n\t\t//console.log(newItems);\r\n\t\tstateCopy.columns = newColumns;\r\n\t\tstateCopy.items = action.items;\r\n\r\n\t\tstateCopy.page = 0;\r\n\t\treturn stateCopy;\r\n\t}\r\n}\r\n\r\nexport default Switch","//import { SORT.TOGGLE } from './actions';\r\nimport { mSort, deleteItemFromArray, getPageRows, findEl } from '../../components/functions';\r\nimport Analytics from './Analytics'\r\nimport Item from './Item'\r\nimport Sort from './Sort'\r\nimport DisplaySettings from './DisplaySettings'\r\nimport Switch from './Switch'\r\n\r\nconst goToPage = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.settings.activePage = action.page;\r\n  return stateCopy;\r\n}\r\n\r\nconst updateItems = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.items = action.items; //need copy?\r\n  mSort(stateCopy.items, stateCopy.sortParams);\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleItemBlock = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.settings.showAddEditBlock = action.showAddEditBlock;\r\n  if (action.editItem) {\r\n    stateCopy.settings.editItem = action.editItem;\r\n  } else {\r\n    stateCopy.settings.editItem = null;\r\n  }\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleSelectRow = (state: any, action: any) => {\r\n  const itemId = action.item.id;\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (~selectedItems.indexOf(itemId)) {\r\n    selectedItems.splice(selectedItems.indexOf(itemId), 1);\r\n  } else {\r\n    selectedItems.push(itemId);\r\n  }\r\n  stateCopy.selectedItems = selectedItems;\r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleThrobber = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.showThrobber = action.showThrobber;\r\n  return stateCopy;\r\n}\r\n\r\nconst deleteSelectedItems = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let items = Object.assign([], stateCopy.items);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  for (let i = 0; i < selectedItems.length; i++) {\r\n    deleteItemFromArray(items, selectedItems[i]);\r\n  }\r\n\r\n  stateCopy.selectedItems = [];\r\n  stateCopy.items = items;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleActivePageRowSelection = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (action.selected) {\r\n    selectedItems = [];\r\n    const activePageRows = getPageRows(stateCopy.items, stateCopy.page, stateCopy.rowsinPage);\r\n    for (let i = 0; i < activePageRows.length; i++) {\r\n      selectedItems.push(activePageRows[i].id);\r\n    }\r\n  } else {\r\n    selectedItems = [];\r\n  }\r\n  stateCopy.selectedItems = selectedItems;\r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleRowToolbar = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  if (stateCopy.settings.toolBarRowId === action.rowId) {\r\n    stateCopy.settings.toolBarRowId = null;\r\n  } else {\r\n    stateCopy.settings.toolBarRowId = action.rowId;\r\n  }\r\n  return stateCopy;\r\n}\r\n\r\nconst shiftClick = (state: any, action: any) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n  stateCopy.settings.toolBarRowId = null;\r\n  stateCopy.settings.showAddEditBlock = false;\r\n\r\n  if (stateCopy.settings.shiftClickItemId) {\r\n    let startItemIndex: number = findEl(stateCopy.items, stateCopy.settings.shiftClickItemId);\r\n    let endItemIndex: number = findEl(stateCopy.items, action.rowId);\r\n    //console.log('shiftClickItemId:'+shiftClickItemId+' startItemIndex:'+startItemIndex+' endItemIndex:'+endItemIndex);\r\n    if (startItemIndex > endItemIndex) {\r\n      const tmp = startItemIndex;\r\n      startItemIndex = endItemIndex;\r\n      endItemIndex = tmp;\r\n    }\r\n\r\n    selectedItems = [];\r\n    for (let i = startItemIndex; i <= endItemIndex; i++) {\r\n      selectedItems.push(stateCopy.items[i].id);\r\n    }\r\n\r\n    stateCopy.settings.shiftClickItemId = stateCopy.items[endItemIndex].id;\r\n  } else {\r\n    stateCopy.settings.shiftClickItemId = action.rowId;\r\n    selectedItems.push(action.rowId);\r\n  }\r\n\r\n  stateCopy.selectedItems = selectedItems;\r\n  return stateCopy;\r\n}\r\n\r\nconst mainReducer = (state: any = [], action: any) => {\r\n  switch (action.type) {\r\n    case 'ANALYTICS.TOGGLE': return Analytics.toggle(state, action);\r\n    case 'ANALYTICS.TRANSFERS': return Analytics.transfers(state, action);\r\n\r\n    case 'ITEM.ADD': return Item.add(state, action);\r\n    case 'ITEM.DELETE': return Item.delete(state, action);\r\n    case 'ITEM.EDIT': return Item.edit(state, action);\r\n    case 'ITEMS.UPDATE': return updateItems(state, action);\r\n\r\n    case 'DISPLAYSETTINGS.TOGGLE': return DisplaySettings.toggle(state, action);\r\n    case 'DISPLAYSETTINGS.SAVE': return DisplaySettings.save(state, action);\r\n\r\n    case 'SORT.RUN': return Sort.run(state, action);\r\n    case 'SORT.TOGGLE': return Sort.toggle(state, action);\r\n\r\n    case 'SWITCH.TRANSFERS': return Switch.transfers(state, action);\r\n    case 'SWITCH.PORTFOLIOS': return Switch.portfolios(state, action);\r\n\r\n    case 'DELETE_SELECTED_ITEMS': return deleteSelectedItems(state, action);\r\n    case 'GO_TO_PAGE': return goToPage(state, action);\r\n    case 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION': return toggleActivePageRowSelection(state, action);\r\n    case 'TOGGLE_ITEM_BLOCK': return toggleItemBlock(state, action);\r\n    case 'TOGGLE_ROW_TOOLBAR': return toggleRowToolbar(state, action);\r\n    case 'TOGGLE_SELECT_ROW': return toggleSelectRow(state, action);\r\n    case 'TOGGLE_THROBBER': return toggleThrobber(state, action);\r\n    case 'SHIFT_CLICK': return shiftClick(state, action);\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default mainReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport { defaultState } from './store/defaultState'\r\nimport rootReducer from './store/reducers/mainReducer'\r\n\r\nimport { mSort } from './components/functions';\r\n\r\nconst getDefaultState = async () => {\r\n\tconst newItems = null;\r\n\t//const newItems = await getDataFromBack('/getportfolios/');  \r\n\r\n\tif (newItems) {\r\n\t\tdefaultState.items = newItems;\r\n\t} else {\r\n\t\tconsole.warn('Отсутствует подключение к БД, показаны тестовые данные.');\r\n\t}\r\n\r\n\tmSort(defaultState.items, defaultState.sortParams);\r\n\r\n\treturn defaultState;\r\n}\r\n\r\n//let preLoadedState = getDefaultState();\r\ngetDefaultState().then(result => {\r\n\tlet preLoadedState = result;\r\n\tconst store = createStore(\r\n\t\trootReducer, preLoadedState,\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t);\r\n\r\n\tReactDOM.render(\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>,\r\n\t\tdocument.getElementById('root')\r\n\t);\r\n});\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}