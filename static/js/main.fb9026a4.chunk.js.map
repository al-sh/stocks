{"version":3,"sources":["store/testData.js","components/functions.js","store/actions.js","components/menu/MainMenu.jsx","components/RTable/ToolbarTop.jsx","components/RTable/TableBody/RowContent.jsx","components/RTable/TableBody/ToolbarRow.jsx","components/RTable/TableBody/ScrollerRow.jsx","components/RTable/TableBody/TableBody.jsx","components/RTable/TableFooter/PagerItem.jsx","components/RTable/TableFooter/TableFooter.jsx","components/RTable/TableHeader/HeadItem.jsx","components/RTable/TableHeader/TableHeader.jsx","components/RTable/ItemBlock.jsx","components/RTable/DisplaySettings.jsx","components/RTable/RTable.jsx","components/common/throbber/Throbber.jsx","App.js","serviceWorker.js","store/reducers/Analytics.js","store/reducers/Item.js","store/reducers/Sort.js","store/reducers/DisplaySettings.js","store/reducers/Switch.js","store/reducers/mainReducer.js","index.js"],"names":["testPortfolios","id","name","isActive","amount","undefined","findEl","arr","i","length","deleteItemFromArray","itemId","indexToDel","splice","getNewId","scData","newId","parseInt","getPageRows","items","pageNumber","rowsinPage","rowsCount","lastRowNum","rows","push","mSort","sortParams","singleCompare","a","b","currentSortParam","type","fieldName","ascOrder","first","isFinite","parseFloat","second","floatCompare","field","defaultCompare","sort","currentResult","maskAmount","x","parts","toString","split","replace","substring","join","getDataFromBack","url","fetch","response","ok","json","console","log","status","testDataWarnText","toggleThrobber","dispatch","visible","showThrobber","sections","portfolios","backUrl","testItems","actionType","transfers","portfolioId","currencyId","dt","Portfolio","actSwitchToSection","sectionName","selectedSection","newItems","warn","MainMenu","switchToTransfers","e","props","switchToPortfolios","className","onClick","this","currentSection","React","Component","connect","state","ToolbarTop","deleteSelectedItems","showItemBlock","showAddEditBlock","showDisplaySettings","showTransfersAnalytics","buttons","key","RowContent","onChangeCheckBox","item","rowClick","event","target","shiftKey","rowId","columns","filter","column","TDs","withCheckBoxes","onChange","checked","selected","text","format","style","settings","shiftClickItemId","ToolbarRow","delete","p","edit","editItem","colSpan","col","ScrollerRow","data","Fragment","needShowToolbar","TableBody","nextProps","nextState","activePageRows","activePage","scRows","rowSelected","selectedItems","indexOf","toolBarRowId","PagerItem","goToPage","page","pageNum","PagerFiller","TableFooter","scPages","pagesCount","currentPage","pageItem","HeadItem","sortType","ctrlPressed","ctrlKey","toggleSortParams","headerClassName","headerStyle","sortOrderClassName","sortIndex","toggleVisualSort","TableHeader","isAllRowsSelectedInPage","allRowsSelected","cols","headItems","width","j","ItemBlock","save","elemToSave","close","onNameChange","setState","value","onStatusChange","float","height","defaultValue","defaultChecked","marginTop","DisplaySettings","onVisibleChange","Object","assign","getAttribute","onNeedCheckBoxesChange","onRowsPerPageChange","maxValue","columnSettings","htmlFor","colnumber","min","max","marginLeft","Rscroller","display","position","cellSpacing","Throbber","App","RTable","Boolean","window","location","hostname","match","Analytics","action","stateCopy","val","Date","toLocaleDateString","textAlign","paddingRight","aData","now","daysCount","amountDisc","discountPercent","countItemAnalytics","Item","add","Sort","toggle","selectedClause","sortParamsContainSelectedField","run","Switch","Transfers","reduce","sum","updateItems","toggleItemBlock","toggleSelectRow","toggleActivePageRowSelection","toggleRowToolbar","shiftClick","startItemIndex","endItemIndex","tmp","mainReducer","defaultState","getDefaultState","then","result","preLoadedState","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb9026a4.chunk.js","sourcesContent":["export const testPortfolios = [\r\n    {id:1,name:'Открытие Брокер', isActive:true, amount: 100500}, \r\n    {id:2,name:'Финам', isActive: true, amount: 35000}, \r\n    {id:3,name:'Тинькофф Инвестиции', isActive: true, amount: 120000}, \r\n    {id:4,name:'Сбербанк', isActive: true, amount: 17000},\r\n    {id:5,name:'ВТБ Капитал', isActive: true, amount: 17000},\r\n    {id:6,name:'БКС Брокер', isActive: false, amount: undefined},\r\n    {id:7,name:'ИК Фридом Финанс', isActive: true, amount: 17000},\r\n    {id:8,name:'Fidelity', isActive: true, amount: 17000},\r\n    {id:9,name:'Interactive brokers', isActive: true, amount: 800000},\r\n    {id:10,name:'TD Ameritrade', isActive: false} \r\n];\r\n\r\nexport const testTransfers = [\r\n    {id: 1, portfolioId: 2, currencyId: 1, dt: \"2018-08-20T14:00:00.000Z\", amount: \"60000.00\", Portfolio: testPortfolios[0]},\r\n    {id: 2, portfolioId: 2, currencyId: 1, dt: \"2018-08-27T14:00:00.000Z\", amount: \"190000.00\", Portfolio: testPortfolios[0]},\r\n    {id: 3, portfolioId: 2, currencyId: 1, dt: \"2018-12-03T14:00:00.000Z\", amount: \"50000.00\", Portfolio: testPortfolios[0]},\r\n    {id: 4, portfolioId: 2, currencyId: 1, dt: \"2018-12-10T14:00:00.000Z\", amount: \"50000.00\", Portfolio: testPortfolios[0]},\r\n];","/*function formatDate(dt){ \r\n  const lPadZeros = value => { return value.toString().length===1?'0'+value:value }\r\n  \r\n  const year = dt.getFullYear();\r\n  const month = lPadZeros( dt.getMonth()+1 );\r\n  const day = lPadZeros( dt.getDate() );\r\n\r\n  const hours = lPadZeros( dt.getHours() );\r\n  const minutes = lPadZeros( dt.getMinutes() );\r\n  const seconds = lPadZeros( dt.getSeconds() );\r\n\r\n  return year + '-' + month + '-' + day + ' ' + hours + ':'+ minutes + ':' + seconds\r\n}\r\n\r\nfunction sendPOST(url, data) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"POST\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    console.log('POST Data:', data)\r\n    request.send(JSON.stringify(data));\r\n  });\r\n}*/\r\n\r\nfunction findEl(arr, id){\r\n  for(let i=0; i<arr.length; i++){\r\n    if(arr[i].id===id){\r\n      return i;  \r\n    }\r\n  }\r\n}\r\n\r\nfunction deleteItemFromArray(arr, itemId){\r\n  const indexToDel = findEl(arr, itemId); \r\n  arr.splice(indexToDel, 1);\r\n}\r\n\r\nfunction getNewId(scData){\r\n  let newId = 0;\r\n\r\n  for(let i=0; i<scData.length; i++){\r\n    if ( parseInt(scData[i].id)> newId){\r\n      newId = scData[i].id;\r\n    }\r\n  }\r\n  return newId+1;\r\n}\r\n\r\nfunction getPageRows(items, pageNumber, rowsinPage){  \r\n  const rowsCount = items.length;\r\n  \r\n  const firstRowNum = pageNumber * rowsinPage; \r\n  let lastRowNum = (pageNumber + 1) * rowsinPage; \r\n  if (lastRowNum>rowsCount) lastRowNum = rowsCount;\r\n  \r\n  let rows = [];\r\n  for(let i=firstRowNum; i < lastRowNum; i++){\r\n    rows.push(items[i]);\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\n//на входе - json, в котором указано в каком порядке сортируется и сам scrollerData\r\n//на выходе - отсортированный scrollerData (изменяет текущий)\r\n//const mSort = (scData, sortParams) => { \r\nfunction mSort(scData, sortParams) {   \r\n  const defaultCompare = (a, b, fieldName, ascOrder) => {    \r\n    if (a[fieldName] > b[fieldName]) { \r\n      return ascOrder?1:-1;\r\n    }\r\n    if (a[fieldName] < b[fieldName]) {\r\n      return ascOrder?-1:1;         \r\n    }  \r\n    return 0; \r\n  }\r\n\r\n  const floatCompare = (a, b, fieldName, ascOrder) => {  \r\n    const first = isFinite(parseFloat(a[fieldName]))?parseFloat(a[fieldName]):0;\r\n    const second = isFinite(parseFloat(b[fieldName]))?parseFloat(b[fieldName]):0;\r\n\r\n    if (first > second) { \r\n      return ascOrder?1:-1;\r\n    }\r\n    if (first < second) {\r\n      return ascOrder?-1:1;         \r\n    }  \r\n    return 0; \r\n  }\r\n\r\n  const singleCompare = (a, b, currentSortParam) => {\r\n    if (currentSortParam.type === 'float'){\r\n      return floatCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n    if (currentSortParam.type === 'default'){\r\n      return defaultCompare(a, b, currentSortParam.field, currentSortParam.ascOrder);\r\n    }\r\n  }  \r\n  \r\n  const compareFunction = (a, b) => {\r\n    let currentSortParam;\r\n\r\n    for (let i=0; i<sortParams.length; i++){\r\n      currentSortParam = sortParams[i];\r\n      const currentResult = singleCompare(a, b, currentSortParam);\r\n      if (currentResult!==0) {\r\n        return currentResult;\r\n      } \r\n    }\r\n    return 0;\r\n  } \r\n\r\n  return scData.sort(compareFunction);\r\n}\r\n\r\nfunction maskAmount(x) {\r\n  if (!isFinite(x)) {\r\n    return '';\r\n  }\r\n\r\n  var parts = x.toString().split(\".\");\r\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  parts[1] = parts[1]?parts[1].substring(0, 2):'00';\r\n  return parts.join(\".\");\r\n}\r\n\r\n/*async function getDataFromBack(url) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.addEventListener(\"load\", function() {\r\n      if (request.status < 400)\r\n        resolve(request.response);\r\n      else\r\n        reject(new Error(\"Request failed: \" + request.statusText));\r\n    });\r\n    request.addEventListener(\"error\", function() {\r\n      reject(new Error(\"Network error\"));\r\n    });\r\n    request.send();\r\n  });\r\n}*/\r\n\r\nasync function getDataFromBack(url) {\r\n  let response = await fetch(url);\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else {\r\n    console.log(\"Ошибка HTTP: \" + response.status);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { findEl, mSort, getNewId, getPageRows, deleteItemFromArray, maskAmount, getDataFromBack };","import { testPortfolios, testTransfers } from './testData'\r\nimport {getDataFromBack} from '../components/functions';\r\n\r\nconst testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\nexport function toggleVisualSort(fieldName, sortType, ctrlPressed) { \r\n    return { type: 'SORT.TOGGLE', field: fieldName,  sortType: sortType, ctrlPressed: ctrlPressed }\r\n}\r\n\r\nfunction toggleThrobber(dispatch, visible){\r\n    dispatch({\r\n        type: 'TOGGLE_THROBBER',\r\n        showThrobber: visible\r\n      });\r\n}\r\n\r\nconst sections = {\r\n    portfolios: {\r\n        backUrl: '/getportfolios',\r\n        testItems: testPortfolios,\r\n        actionType: 'SWITCH.PORTFOLIOS'\r\n    },\r\n    transfers:{\r\n        backUrl: '/transfers.getall',\r\n        testItems: testTransfers,\r\n        actionType: 'SWITCH.TRANSFERS'\r\n    }\r\n}\r\n\r\nexport async function actSwitchToSection(sectionName, dispatch) {\r\n    toggleThrobber(dispatch, true);\r\n    \r\n    const selectedSection = sections[sectionName];\r\n    let newItems = await getDataFromBack(selectedSection.backUrl); \r\n    if (!newItems) {\r\n      console.warn(testDataWarnText);\r\n      newItems = selectedSection.testItems;     \r\n    } \r\n    console.log(newItems);\r\n\r\n    dispatch({\r\n      type: selectedSection.actionType,\r\n      items: newItems\r\n    });\r\n    toggleThrobber(dispatch, false);\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {actSwitchToSection} from '../../store/actions' \r\n\r\nclass MainMenu extends React.Component {\r\n  testDataWarnText = 'Отсутствует подключение к БД, показаны тестовые данные';\r\n\r\n  switchToTransfers = async (e) => {\r\n    actSwitchToSection('transfers', this.props.dispatch);\r\n  }\r\n\r\n  switchToPortfolios = async (e) => {\r\n    actSwitchToSection('portfolios', this.props.dispatch);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"MainMenu\">\r\n        <span onClick={this.switchToTransfers} className={this.props.currentSection==='transfers'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Зачисления</span>\r\n        <span onClick={this.switchToPortfolios} className={this.props.currentSection==='portfolios'? \"MainMenu__Item MainMenu__Item-active\" : \"MainMenu__Item\" }>Портфели</span>       \r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(MainMenu)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ToolbarTop extends React.Component {\r\n  deleteSelectedItems = (e) => {    \r\n    this.props.dispatch({\r\n      type: 'DELETE_SELECTED_ITEMS'\r\n    });\r\n  }\r\n\r\n  showItemBlock = (e) => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true\r\n    });\r\n  }\r\n\r\n  showDisplaySettings = (e) => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: true\r\n    });\r\n  }\r\n\r\n  showTransfersAnalytics = (e) => {\r\n    this.props.dispatch({\r\n      type: 'ANALYTICS.TRANSFERS',\r\n      showDisplaySettings: true\r\n    });\r\n  }\r\n  \r\n  render() {   \r\n    const buttons = [];\r\n    buttons.push( <button key=\"btnDel\" onClick={this.deleteSelectedItems} className=\"toolbarButton\">Удалить</button> );\r\n    buttons.push( <button key=\"btnAdd\" onClick={this.showItemBlock} className=\"toolbarButton\">Добавить</button> );\r\n    buttons.push( <button key=\"btnSettings\" onClick={this.showDisplaySettings} className=\"toolbarButton\">Настройка</button> );\r\n    if (this.props.currentSection==='transfers') {\r\n      buttons.push( <button key=\"transfers_Analytics\" onClick={this.showTransfersAnalytics} className=\"toolbarButton\">Аналитика</button> );\r\n    }\r\n\r\n    return (\r\n      <div className=\"ToolbarTop\">        \r\n        {buttons}\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    currentSection: state.currentSection\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ToolbarTop)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass RowContent extends React.Component {\r\n  onChangeCheckBox = () => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_SELECT_ROW',\r\n      item: this.props.item\r\n    });\r\n  }\r\n\r\n  rowClick  = (event) => {     \r\n    if (event.target.name==='rowCheck') return;  \r\n    if (event.shiftKey) { \r\n      this.props.dispatch({\r\n        type: 'SHIFT_CLICK',\r\n        rowId: this.props.item.id\r\n      }); \r\n      return; \r\n    }  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const item = this.props.item;\r\n    const columns = this.props.columns.filter(column => column.visible);\r\n\r\n    const TDs = [];\r\n    if (this.props.withCheckBoxes) {\r\n      TDs.push(<td key={\"td_checkBox_itemId_\"+item.id}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.props.selected}/></td>);\r\n    }\r\n\r\n    for (let i=0; i<columns.length; i++){       \r\n      let text = '';\r\n      if (columns[i].format) {\r\n        text = columns[i].format( item[columns[i].field] ); \r\n      } else { \r\n        if (item[columns[i].field]) text = item[columns[i].field].toString(); \r\n      } \r\n      TDs.push(<td key={\"td_itemId_\"+item.id+'_col_'+i} style={columns[i].style} >{ text }</td>);\r\n    }\r\n    \r\n    return (      \r\n      <tr key={item.id} className={this.props.selected?'rowSel':''} onClick={this.rowClick}>\r\n        {TDs}\r\n      </tr>          \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n  return {\r\n    columns: state.columns,\r\n    items: state.items,\r\n    withCheckBoxes: state.settings.withCheckBoxes,    \r\n    shiftClickItemId: state.settings.shiftClickItemId    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RowContent)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ToolbarRow extends React.Component {\r\n\r\n  delete  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'ITEM.DELETE',\r\n      itemId: this.props.item.id\r\n    });\r\n  }\r\n\r\n  edit  = (p) => {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: true,\r\n      editItem: this.props.item\r\n    });\r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td colSpan={this.props.columns.filter(col => col.visible).length}>\r\n          <button onClick={this.delete} className=\"toolbarButton\">Удалить</button>\r\n          <button onClick={this.edit} className=\"toolbarButton\">Редактировать</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    columns: state.columns\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ToolbarRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport RowContent from './RowContent';\r\nimport ToolbarRow from './ToolbarRow';\r\n\r\nclass ScrollerRow extends React.Component { \r\n  render() {\r\n    const item = this.props.data;\r\n    \r\n    return (\r\n      <React.Fragment> \r\n        <RowContent key={item.id} item={item} selected={this.props.selected} /> \r\n        { this.props.needShowToolbar ? <ToolbarRow item={item} /> : null }\r\n      </React.Fragment>    \r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null)(ScrollerRow)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ScrollerRow from './ScrollerRow';\r\n\r\nimport {getPageRows} from '../../functions';\r\n\r\nclass TableBody extends React.Component { \r\n  shouldComponentUpdate(nextProps, nextState){\r\n    //console.log('shouldComponentUpdate old props', this.props, 'nextProps:', nextProps);\r\n    return true;\r\n  } \r\n\r\n  render() {   \r\n    const items = this.props.items;    \r\n    const activePage = this.props.activePage;\r\n    const rowsinPage = this.props.rowsinPage;\r\n      \r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n    const scRows = [];  \r\n    \r\n    for (let i=0; i<activePageRows.length; i++){     \r\n      const rowSelected = ~this.props.selectedItems.indexOf(activePageRows[i].id)?true:false;     \r\n      const needShowToolbar = (this.props.toolBarRowId===activePageRows[i].id);\r\n      scRows.push(<ScrollerRow key={'scrollerRow_'+i} data={activePageRows[i]} selected={rowSelected} needShowToolbar={needShowToolbar} />);\r\n    }\r\n    \r\n    return (\r\n      <tbody>              \r\n        {scRows}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: state.items,\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,  \r\n    toolBarRowId: state.settings.toolBarRowId,  \r\n    selectedItems: state.selectedItems    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TableBody)","import React from 'react';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerItem extends React.Component {\r\n  goToPage  = (page) => {       \r\n    this.props.dispatch({\r\n      type: 'GO_TO_PAGE',\r\n      page: this.props.data.pageNum\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data;\r\n   \r\n    return (\r\n      <span onClick={this.goToPage} className={this.props.isActive?'activePage':''}>\r\n        {data.pageNum+1}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, null)(PagerItem)","import React from 'react';\r\nimport PagerItem from './PagerItem';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass PagerFiller extends React.Component {\r\n  render() {   \r\n    return (\r\n      <span className=\"pagerFiller\">\r\n        ...\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass TableFooter extends React.Component {  \r\n  render() {    \r\n    const rowsinPage = this.props.rowsinPage;\r\n    const rowsCount = this.props.rowsCount;\r\n    const activePage = this.props.activePage;\r\n\r\n    const scPages = [];  \r\n    let pagesCount = ((rowsCount - rowsCount % rowsinPage) / rowsinPage);  \r\n    if (rowsCount % rowsinPage > 0) {\r\n      pagesCount = pagesCount + 1;\r\n    }\r\n    \r\n    const nearPagesCount = 2;\r\n    for(let i=0; i < pagesCount; i++){ \r\n      let currentPage = {};\r\n      currentPage.pageNum = i; \r\n      let pageItem = <PagerItem key={'pg'+currentPage.pageNum} data={currentPage} isActive={activePage===i?true:false} />;\r\n\r\n      if (pagesCount>10) { //показываем только часть страниц\r\n        if ( (i===0) && (i < activePage - nearPagesCount) ){//первая страница\r\n          scPages.push(pageItem);\r\n          if (activePage - nearPagesCount !== 1) {  //чтобы не отображать филлер, если следующая страница - вторая\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }         \r\n        }       \r\n        if ( (i >= activePage - nearPagesCount) && (i <= activePage + nearPagesCount) ) {\r\n          scPages.push(pageItem);\r\n        }\r\n        \r\n        if ( (i===pagesCount-1) && (i > activePage + nearPagesCount) ){//последняя страница\r\n          if (activePage + nearPagesCount !== pagesCount-2){ //чтобы не отображать филлер, если предыдущая страница - предпоследняя\r\n            scPages.push(<PagerFiller key={'filler'+currentPage.pageNum} />);\r\n          }          \r\n          scPages.push(pageItem);\r\n        }        \r\n      } else {\r\n        scPages.push(pageItem);\r\n      }      \r\n    }\r\n\r\n    //return scPages;\r\n    return <div className=\"pageBlock\">{scPages}</div>     \r\n  } \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    activePage: state.settings.activePage,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    rowsCount: state.items.length\r\n  }\r\n}\r\n\r\n//export default TableFooter;\r\nexport default connect(mapStateToProps)(TableFooter)","import React from 'react';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\nimport { toggleVisualSort } from '../../../store/actions';\r\n\r\nclass HeadItem extends React.Component {  \r\n  sort  = (event) => {  \r\n    const sortType = this.props.type?this.props.type:'default';\r\n    const field = this.props.field; \r\n\r\n    /*this.props.dispatch({\r\n      type: 'SORT.TOGGLE',\r\n      field: field, \r\n      sortType: sortType, \r\n      ctrlPressed: event.ctrlKey\r\n    });*/\r\n    const ctrlPressed = event.ctrlKey;\r\n    this.props.toggleSortParams(field, sortType, ctrlPressed);\r\n  }\r\n\r\n  //componentWillMount(){\r\n    //console.log('componentWillMount', this.props.sortParams);\r\n  //}\r\n\r\n  /*shouldComponentUpdate(nextProps, nextState){\r\n    console.log('shouldComponentUpdate old props', this.props.sortIndex, 'nextProps:', nextProps.sortIndex);\r\n    return true;\r\n  }*/\r\n\r\n  /*static getDerivedStateFromProps(props, state){\r\n    console.log('getDerivedStateFromProps props', props, 'state:', state);\r\n  }*/\r\n\r\n  //componentWillUpdate(nextProps, nextState){\r\n    //console.log('componentWillUpdate old', this.props.sortParams, 'new:', nextProps.sortParams);\r\n  //}\r\n\r\n  render(){\r\n    return (      \r\n      <td className={this.props.headerClassName} style={this.props.headerStyle} >\r\n        <span className=\"sortHeader\" onClick={this.sort}>{this.props.text}</span>        \r\n        <span className={this.props.sortOrderClassName}></span>\r\n        <span className=\"sortNumber\">{this.props.sortIndex}</span>\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    toggleSortParams: (field, sortType, ctrlPressed) => {\r\n      dispatch( toggleVisualSort(field, sortType, ctrlPressed) )\r\n    }\r\n  }\r\n}\r\n\r\n//export default HeadItem;\r\n\r\nexport default connect(null, mapDispatchToProps)(HeadItem)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport HeadItem from './HeadItem';\r\nimport {getPageRows} from '../../functions';\r\n\r\nclass TableHeader extends React.Component { \r\n  onChangeCheckBox = (event) => {\r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION',\r\n      selected: event.target.checked\r\n    });      \r\n  }\r\n\r\n  isAllRowsSelectedInPage = (p) => { \r\n    const items = this.props.items;    \r\n    const activePage = this.props.page;\r\n    const rowsinPage = this.props.rowsinPage;\r\n    \r\n    const activePageRows = getPageRows(items, activePage, rowsinPage);\r\n\r\n    let allRowsSelected = true;\r\n    for (let i=0; i<activePageRows.length; i++){      \r\n      if ( this.props.selectedItems.indexOf(activePageRows[i].id)===-1 ){ \r\n        allRowsSelected = false;\r\n      }\r\n    }\r\n\r\n    if (activePageRows.length===0) { allRowsSelected = false; }\r\n   \r\n    return allRowsSelected;    \r\n  }\r\n\r\n  render() {   \r\n    //console.log('tableHeader - render');\r\n    const sortParams = this.props.sortParams;   \r\n    const columns = this.props.columns.filter(column => column.visible);\r\n\r\n    const cols = [];\r\n    const headItems = [];\r\n\r\n    if (this.props.withCheckBoxes) {\r\n      cols.push(<col key={\"col_cb\"} width=\"50\"/>);\r\n      headItems.push(<td key={\"headItem_cb\"}><input type=\"checkbox\" name=\"rowCheck\" onChange={this.onChangeCheckBox} checked={this.isAllRowsSelectedInPage()}/></td>);      \r\n    }\r\n\r\n    for (let i=0; i<columns.length; i++){\r\n      let sortIndex, sortOrderClassName;   \r\n      if (sortParams.length>0) {        \r\n        for (let j=0; j<sortParams.length; j++){\r\n          if (sortParams[j].field === columns[i].field){        \r\n            sortIndex = j + 1;        \r\n            sortOrderClassName = sortParams[j].ascOrder?'sortArrowUp':'sortArrowDown';\r\n          }\r\n        }\r\n        \r\n      } \r\n      cols.push(<col key={\"col_\"+i} width={columns[i].width} />);\r\n      headItems.push(<HeadItem key={\"headItem_\"+i} field={columns[i].field} type={columns[i].type} \r\n          headerClassName={columns[i].headerClassName} headerStyle={columns[i].headerStyle}\r\n          text={columns[i].text} sortIndex={sortIndex} sortOrderClassName={sortOrderClassName} />);\r\n    }  \r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <colgroup>          \r\n          {cols}\r\n        </colgroup>           \r\n        <thead>           \r\n          <tr>             \r\n            {headItems}\r\n          </tr> \r\n        </thead>  \r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => { \r\n  return {\r\n    columns: state.columns,\r\n    items: state.items, \r\n    page: state.page,\r\n    withCheckBoxes: state.settings.withCheckBoxes,\r\n    rowsinPage: state.settings.rowsinPage,    \r\n    selectedItems: state.selectedItems,\r\n    sortParams: state.sortParams\r\n  }\r\n}\r\n\r\n//export default TableHeader;\r\nexport default connect(mapStateToProps)(TableHeader)","import React from 'react';\r\nimport {getNewId} from '../functions';\r\n\r\n//Redux\r\nimport { connect } from 'react-redux';\r\n\r\nclass ItemBlock extends React.Component { \r\n  state = { \r\n    id:  this.props.editItem?this.props.editItem.id:0, \r\n    name:  this.props.editItem?this.props.editItem.name:\"Название\",   \r\n    isActive: this.props.editItem?this.props.editItem.isActive:false\r\n  }   \r\n\r\n  save  = (p) => { \r\n    let elemToSave = {};\r\n    \r\n    elemToSave.id = this.state.id;    \r\n    elemToSave.name = this.state.name;    \r\n    elemToSave.isActive = this.state.isActive;  \r\n    \r\n    console.log(elemToSave);\r\n    if (this.props.editItem) {\r\n      this.props.dispatch({\r\n        type: 'ITEM.EDIT',\r\n        item: elemToSave\r\n      });\r\n    } else {\r\n      elemToSave.id = getNewId(this.props.items);\r\n      this.props.dispatch({\r\n        type: 'ITEM.ADD',\r\n        item: elemToSave\r\n      });\r\n       /*accountsendPOST('/addportfolio', elemToSave).then(response => {\r\n      RscrollerFunctions.toggleAddEditBlock(false);\r\n      RscrollerFunctions.refresh(true);\r\n      });*/\r\n    }\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'TOGGLE_ITEM_BLOCK',\r\n      showAddEditBlock: false\r\n    });\r\n  }\r\n  \r\n  onNameChange = (e) => {    \r\n    this.setState({name: e.target.value});   \r\n  }\r\n  \r\n  onStatusChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({isActive: e.target.checked});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    let item = {};\r\n\r\n    if (this.props.editItem) {  \r\n      item = this.props.editItem;  \r\n    } else {\r\n      item.name = 'Название1';    \r\n      item.isActive = false;\r\n    }     \r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>\r\n          <span className=\"itemBlock__label\">Название:</span>\r\n          <input id=\"fio\" onChange={this.onNameChange} type=\"text\" defaultValue={item.name} />\r\n        </div>        \r\n        <div>\r\n          <span className=\"itemBlock__label\">Активный</span>\r\n          <input id=\"status\" onChange={this.onStatusChange} type=\"checkbox\" defaultChecked={item.isActive} />           \r\n        </div>  \r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    items: state.items,\r\n    editItem: state.settings.editItem\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemBlock)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DisplaySettings extends React.Component { //на будущее, можно добавить количество строк на странице для выбора\r\n  state = { \r\n    columns:  this.props.columns,\r\n    rowsinPage: this.props.rowsinPage,\r\n    withCheckBoxes: this.props.withCheckBoxes\r\n  }   \r\n\r\n  save  = (p) => {\r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.SAVE',\r\n      columns: this.state.columns,\r\n      rowsinPage: this.state.rowsinPage,\r\n      withCheckBoxes: this.state.withCheckBoxes\r\n    });\r\n  }\r\n\r\n  close  = (p) => {  \r\n    this.props.dispatch({\r\n      type: 'DISPLAYSETTINGS.TOGGLE',\r\n      showDisplaySettings: false\r\n    });\r\n  }\r\n  \r\n  onVisibleChange = (e) => {\r\n    let columns = Object.assign([], this.state.columns);   \r\n    columns[e.target.getAttribute('colnumber')].visible = e.target.checked;\r\n    this.setState({columns: columns});   \r\n  }\r\n\r\n  onNeedCheckBoxesChange = (e) => {\r\n    this.setState({withCheckBoxes: e.target.checked});   \r\n  }\r\n\r\n  onRowsPerPageChange = (e) => {\r\n    const value = parseInt(e.target.value);  \r\n    const maxValue = parseInt( e.target.getAttribute('max') );\r\n\r\n    if (value > maxValue) {      \r\n      e.target.value = maxValue;     \r\n    }  \r\n    this.setState({rowsinPage: value});   \r\n  }\r\n\r\n  componentDidMount() {   \r\n    this.props.dispatch({ //hide row toolbar\r\n      type: 'TOGGLE_ROW_TOOLBAR',\r\n      rowId: null\r\n    });\r\n  }\r\n\r\n  render() {   \r\n    const columns = this.props.columns;\r\n    let columnSettings = [];\r\n    for (let i=0; i<columns.length; i++){\r\n      columnSettings.push(\r\n        <div key={\"columnSettings_\"+i}>\r\n          <label htmlFor={\"columnSettingsInp_\"+i}>{columns[i].text}</label>\r\n          <input id={\"columnSettingsInp_\"+i} colnumber={i} field={columns[i].field} onChange={this.onVisibleChange} type=\"checkbox\" defaultChecked={columns[i].visible} />  \r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"itemBlock\">\r\n        <button onClick={this.close} className=\"toolbarButton\" style={{float: 'right', height: '25px', width: '25px'}}>X</button>\r\n        <div>Настройка отображения полей</div>\r\n        {columnSettings}\r\n        <div>\r\n          <span>Количество строк на странице:</span>\r\n          <input type=\"number\" min={1} max={100} name=\"rowsPerPage\" onChange={this.onRowsPerPageChange} defaultValue={this.props.rowsinPage}\r\n                 style={ {marginLeft: '10px', width: '50px'} } />\r\n        </div>\r\n        <div>\r\n          <label htmlFor={'inp_needCheckBoxes'}>Чекбоксы</label>\r\n          <input id={'inp_needCheckBoxes'} type=\"checkbox\" onChange={this.onNeedCheckBoxesChange} defaultChecked={this.props.withCheckBoxes} />\r\n        </div>\r\n        <div>\r\n          <button onClick={this.save} className=\"toolbarButton\" style={{marginTop: '25px'}}>Сохранить</button>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {   \r\n    columns: state.columns,\r\n    rowsinPage: state.settings.rowsinPage,\r\n    withCheckBoxes: state.settings.withCheckBoxes\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DisplaySettings)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ToolbarTop from './ToolbarTop';\r\nimport TableBody from './TableBody/TableBody';\r\nimport TableFooter from './TableFooter/TableFooter';\r\nimport TableHeader from './TableHeader/TableHeader';\r\n\r\n//custom components\r\nimport ItemBlock from './ItemBlock';\r\nimport DisplaySettings from './DisplaySettings';\r\n\r\nclass Rscroller extends React.Component { \r\n  render() {     \r\n    return (\r\n      <div style={{display: 'inline-block', position: 'relative' }}>\r\n        { this.props.showAddEditBlock ? <ItemBlock /> : null }\r\n        { this.props.showDisplaySettings ? <DisplaySettings /> : null }\r\n        <div className=\"rScroller\">\r\n          <div className=\"rScrollerHeader\">\r\n            <ToolbarTop />\r\n          </div>          \r\n          <table cellSpacing=\"0\">  \r\n            <TableHeader />\r\n            <TableBody />            \r\n          </table>            \r\n          <TableFooter />\r\n        </div>        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    showAddEditBlock: state.settings.showAddEditBlock,\r\n    showDisplaySettings: state.settings.showDisplaySettings\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps, //mapStateToProps\r\n  null //mapDispatchToProps\r\n)(Rscroller)","import React from 'react';\r\n\r\nclass Throbber extends React.Component {\r\n    render(){\r\n        return (      \r\n            <div className=\"Throbber\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Throbber;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport MainMenu from './components/menu/MainMenu';\r\nimport RTable from './components/RTable/RTable';\r\nimport Throbber from './components/common/throbber/Throbber';\r\n\r\nclass App extends React.Component { \r\n  render() {  \r\n    return (         \r\n      <div className=\"App\">      \r\n        <MainMenu />\r\n        { this.props.showThrobber ? <Throbber /> : <RTable /> }           \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {  \r\n    showThrobber: state.showThrobber\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null //mapDispatchToProps\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {maskAmount} from '../../components/functions';\r\n\r\nconst Analytics = {  \r\n  transfers: (state, action) => { \r\n\t\tlet discountPercent = 6;\r\n\r\n\t\tfunction countItemAnalytics(aData){\r\n\t\t\tfor (let i=0; i<aData.length; i++){\r\n\t\t\t\tconst item = aData[i];\r\n\t\t\t\tconst dt = new Date(item.dt); \r\n\t\t\t\tconst now = new Date();\r\n\t\t\t\titem.daysCount = (now - dt)/(1000*60*60*24);\r\n\t\t\t\titem.amountDisc = item.amount * (1 + discountPercent/100 * item.daysCount/366);\r\n\t\t\t} \r\n\t\t\r\n\t\t\treturn aData;\r\n\t\t}\r\n\t\t\r\n    let stateCopy = Object.assign({}, state);      \r\n    if (stateCopy.currentSection !== 'transfers'){\r\n\t\t\tconsole.warn('Аналитика пока доступна только для зачислений');\r\n\t\t\treturn;\r\n\t\t} \r\n\r\n    stateCopy.columns = [\r\n      { \r\n\t\t\t\twidth: '100px', \r\n\t\t\t\tfield: 'dt', \r\n        text: 'Дата',\r\n        format: (val) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '200px', \r\n\t\t\t\tfield: 'Portfolio', \r\n        text: 'Портфель',\r\n        format: (Portfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'Portfolio', \r\n\t\t\t\ttext: 'Статус', \r\n\t\t\t\tformat: (Portfolio) => { return Portfolio.isActive?'Активный':'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'amount', \r\n\t\t\t\ttext: 'Сумма', \r\n\t\t\t\ttype: 'float', \r\n\t\t\t\theaderClassName: 'header-amount',\t\t\r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '120px', \r\n\t\t\t\tfield: 'daysCount', \r\n\t\t\t\ttext: 'Кол-во дней', \r\n\t\t\t\ttype: 'float', \r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '120px', \r\n\t\t\t\tfield: 'amountDisc', \r\n\t\t\t\ttext: 'Под '+discountPercent+' %', \r\n\t\t\t\ttype: 'float',\t\t\r\n\t\t\t\theaderClassName: 'header-amount',\t\t\r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\t\t\r\n    countItemAnalytics(stateCopy.items);\r\n\r\n    stateCopy.page = 0;\r\n    return stateCopy;    \r\n\t},\r\n\t\r\n}\r\n  \r\nexport default Analytics","import {mSort, deleteItemFromArray} from '../../components/functions';\r\n\r\nconst Item = { //функции работы с элементом списка\r\n  add: (state, action) => {\r\n    let stateCopy = Object.assign({}, state);   \r\n    let items = Object.assign([], stateCopy.items);\r\n    items.push(action.item);\r\n    \r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;      \r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  },\r\n\r\n  edit: (state, action) => {\r\n    //let stateCopy = getObjCopy(state);\r\n    let stateCopy = Object.assign({}, state);    \r\n    let items = Object.assign([], stateCopy.items);\r\n    \r\n    deleteItemFromArray(items, action.item.id);\r\n    items.push(action.item);\r\n\r\n    mSort(items, stateCopy.sortParams);\r\n\r\n    stateCopy.items = items;      \r\n    stateCopy.settings.showAddEditBlock = false;\r\n    return stateCopy;\r\n  }, \r\n\r\n  delete: (state, action) => {\r\n    let stateCopy = Object.assign({}, state);      \r\n    let items = Object.assign([], stateCopy.items); \r\n\r\n    deleteItemFromArray(items, action.itemId);\r\n\r\n    stateCopy.selectedItems = [];\r\n    stateCopy.items = items; \r\n    return stateCopy;\r\n  }\r\n\r\n}\r\n  \r\nexport default Item","import {mSort} from '../../components/functions';\r\n\r\nconst Sort = { \r\n  toggle: (state, action) => {\r\n    const selectedClause = {\r\n      field: action.field,\r\n      type: action.sortType,     \r\n      ascOrder: true\r\n    };\r\n\r\n    let stateCopy = Object.assign({}, state); \r\n    let sortParams = Object.assign([], stateCopy.sortParams);\r\n\r\n    if (sortParams.length>0) {\r\n      if (sortParams[0].field === selectedClause.field) {\r\n        selectedClause.ascOrder = !sortParams[0].ascOrder;\r\n      }\r\n    } \r\n    \r\n    if (action.ctrlPressed) {       \r\n      let sortParamsContainSelectedField = false; \r\n      for (let i=0; i<sortParams.length; i++){\r\n        if (sortParams[i].field === selectedClause.field){ \r\n          //смена порядка сортировки по заданному полю в случае ctrl+click          \r\n          selectedClause.ascOrder = !sortParams[i].ascOrder; \r\n          sortParams[i] = selectedClause;\r\n          sortParamsContainSelectedField = true;\r\n        }\r\n      } \r\n      \r\n      if (!sortParamsContainSelectedField) {\r\n        sortParams.push(selectedClause);         \r\n      } \r\n    } else {\r\n      sortParams = [];\r\n      sortParams.push(selectedClause);\r\n    }   \r\n    \r\n    let newItems = Object.assign([], stateCopy.items);\r\n    mSort(newItems, sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    stateCopy.sortParams = sortParams;  \r\n\r\n    return stateCopy;\r\n  },\r\n\r\n  run: (state, action) => { \r\n    let stateCopy = Object.assign({}, state);   \r\n    let newItems = Object.assign([], stateCopy.items);\r\n\r\n    mSort(newItems, stateCopy.sortParams);\r\n\r\n    stateCopy.items = newItems;\r\n    return stateCopy;\r\n  }\r\n}\r\n  \r\nexport default Sort","const DisplaySettings = { \r\n  toggle: (state, action) => {    \r\n    let stateCopy = Object.assign({}, state);      \r\n    stateCopy.settings.showDisplaySettings = action.showDisplaySettings;   \r\n    return stateCopy;    \r\n  },\r\n\r\n  save: (state, action) => {    \r\n    let stateCopy = Object.assign({}, state);      \r\n    stateCopy.columns = action.columns;  \r\n    stateCopy.settings.rowsinPage = action.rowsinPage;   \r\n    stateCopy.settings.withCheckBoxes = action.withCheckBoxes;\r\n    stateCopy.settings.showDisplaySettings = false;\r\n    stateCopy.settings.activePage = 0;\r\n    return stateCopy;    \r\n  }\r\n}\r\n  \r\nexport default DisplaySettings","import {maskAmount} from '../../components/functions';\r\n\r\nconst Switch = {  \r\n\r\n  transfers: (state, action) => {    \r\n    let stateCopy = Object.assign({}, state);      \r\n    stateCopy.currentSection = 'transfers'; \r\n    stateCopy.columns = [\r\n      { \r\n\t\t\t\twidth: '100px', \r\n\t\t\t\tfield: 'dt', \r\n        text: 'Дата',\r\n        format: (val) => { const dt = new Date(val); return dt.toLocaleDateString() },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '200px', \r\n\t\t\t\tfield: 'Portfolio', \r\n        text: 'Портфель',\r\n        format: (Portfolio) => { return Portfolio.name; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'Portfolio', \r\n\t\t\t\ttext: 'Статус', \r\n\t\t\t\tformat: (Portfolio) => { return Portfolio.isActive?'Активный':'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'amount', \r\n\t\t\t\ttext: 'Сумма', \r\n\t\t\t\ttype: 'float', \r\n\t\t\t\theaderClassName: 'header-amount',\r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t];\r\n\r\n    //const newItems = await getDataFromBack('/transfers.getall');  \r\n    //console.log(newItems);\r\n    stateCopy.items = action.items;\r\n\r\n    stateCopy.page = 0;\r\n    return stateCopy;    \r\n\t},\r\n\t\r\n\tportfolios: (state, action) => {    \r\n\t\tlet stateCopy = Object.assign({}, state); \r\n\t\tstateCopy.currentSection = 'portfolios';\r\n    stateCopy.columns = [\r\n\t\t\t{ \r\n\t\t\t\twidth: '250px', \r\n\t\t\t\tfield: 'name', \r\n\t\t\t\ttext: 'Название',\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '160px', \r\n\t\t\t\tfield: 'isActive', \r\n\t\t\t\ttext: 'Статус', \r\n\t\t\t\tformat: (isActive) => { return isActive?'Активный':'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'Transfers', \r\n\t\t\t\ttext: 'Сумма', \r\n\t\t\t\ttype: 'float', \r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: (Transfers) => {\r\n\t\t\t\t\t\t\t\tif (Transfers) { //todo: add transfers to testPortfolios\r\n\t\t\t\t\t\t\t\t\treturn maskAmount( Transfers.reduce( (sum, item ) => { return sum + parseFloat(item.amount) }, 0 ) ) \r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t]\r\n   \r\n    //console.log(newItems);\r\n    stateCopy.items = action.items;\r\n\r\n    stateCopy.page = 0;\r\n    return stateCopy;    \r\n  }\r\n}\r\n  \r\nexport default Switch","//import { SORT.TOGGLE } from './actions';\r\nimport {mSort, deleteItemFromArray, getPageRows, findEl} from '../../components/functions';\r\nimport Analytics from './Analytics'\r\nimport Item from './Item'\r\nimport Sort from './Sort'\r\nimport DisplaySettings from './DisplaySettings'\r\nimport Switch from './Switch'\r\n\r\nconst goToPage = (state, action) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.settings.activePage = action.page;\r\n  return stateCopy;\r\n}\r\n\r\nconst updateItems = (state, action) => {  \r\n  let stateCopy = Object.assign({}, state);  \r\n  stateCopy.items = action.items; //need copy?\r\n  mSort(stateCopy.items, stateCopy.sortParams);\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleItemBlock = (state, action) => {\r\n  let stateCopy = Object.assign({}, state);      \r\n  stateCopy.settings.showAddEditBlock = action.showAddEditBlock;\r\n  if (action.editItem) {\r\n    stateCopy.settings.editItem = action.editItem;\r\n  } else {\r\n    stateCopy.settings.editItem = null;\r\n  }\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleSelectRow = (state, action) => {\r\n  const itemId = action.item.id;\r\n  let stateCopy = Object.assign({}, state);   \r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (~selectedItems.indexOf(itemId)) {\r\n    selectedItems.splice( selectedItems.indexOf(itemId), 1 );\r\n  } else {\r\n    selectedItems.push(itemId);\r\n  }  \r\n  stateCopy.selectedItems = selectedItems;      \r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleThrobber = (state, action) => {  \r\n  let stateCopy = Object.assign({}, state);\r\n  stateCopy.showThrobber = action.showThrobber;\r\n  return stateCopy;\r\n} \r\n\r\nconst deleteSelectedItems = (state, action) => {\r\n  let stateCopy = Object.assign({}, state);  \r\n  let items = Object.assign([], stateCopy.items); \r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  for (let i=0; i<selectedItems.length; i++){\r\n    deleteItemFromArray(items, selectedItems[i]);\r\n  }  \r\n\r\n  stateCopy.selectedItems = [];\r\n  stateCopy.items = items; \r\n  return stateCopy;\r\n}\r\n\r\nconst toggleActivePageRowSelection = (state, action) => {\r\n  let stateCopy = Object.assign({}, state); \r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n\r\n  if (action.selected) {\r\n    selectedItems = [];\r\n    const activePageRows = getPageRows(stateCopy.items, stateCopy.page, stateCopy.rowsinPage);    \r\n    for (let i=0; i<activePageRows.length; i++){      \r\n      selectedItems.push(activePageRows[i].id);\r\n    }    \r\n  } else {\r\n    selectedItems = [];\r\n  }    \r\n  stateCopy.selectedItems = selectedItems;\r\n  stateCopy.showAddEditBlock = false;\r\n  return stateCopy;\r\n}\r\n\r\nconst toggleRowToolbar = (state, action) => {\r\n  let stateCopy = Object.assign({}, state);   \r\n  if (stateCopy.settings.toolBarRowId === action.rowId) {\r\n    stateCopy.settings.toolBarRowId = null;\r\n  } else {\r\n    stateCopy.settings.toolBarRowId = action.rowId;\r\n  }  \r\n  return stateCopy;\r\n}\r\n\r\nconst shiftClick = (state, action) => {\r\n  let stateCopy = Object.assign({}, state);\r\n  let selectedItems = Object.assign([], stateCopy.selectedItems);\r\n  stateCopy.settings.toolBarRowId = null;   \r\n  stateCopy.settings.showAddEditBlock = false;\r\n\r\n  if (stateCopy.settings.shiftClickItemId) {    \r\n    let startItemIndex = findEl(stateCopy.items, stateCopy.settings.shiftClickItemId);\r\n    let endItemIndex = findEl(stateCopy.items, action.rowId);\r\n    //console.log('shiftClickItemId:'+shiftClickItemId+' startItemIndex:'+startItemIndex+' endItemIndex:'+endItemIndex);\r\n    if (startItemIndex>endItemIndex) {\r\n      const tmp = startItemIndex;\r\n      startItemIndex = endItemIndex;\r\n      endItemIndex = tmp;\r\n    }        \r\n\r\n    selectedItems = [];\r\n    for (let i=startItemIndex; i<=endItemIndex; i++){\r\n      selectedItems.push(stateCopy.items[i].id); \r\n    }\r\n    \r\n    stateCopy.settings.shiftClickItemId = stateCopy.items[endItemIndex].id;    \r\n  } else {\r\n    stateCopy.settings.shiftClickItemId = action.rowId;\r\n    selectedItems.push(action.rowId);\r\n  }  \r\n\r\n  stateCopy.selectedItems = selectedItems;\r\n  return stateCopy;\r\n}\r\n\r\nconst mainReducer = (state = [], action) => {\r\n\tswitch (action.type) {\r\n    case 'ANALYTICS.TRANSFERS': return Analytics.transfers(state, action);\r\n    \r\n    case 'ITEM.ADD': return Item.add(state, action);\r\n    case 'ITEM.DELETE':\treturn Item.delete(state, action); \r\n    case 'ITEM.EDIT': return Item.edit(state, action);\r\n    case 'ITEMS.UPDATE': return updateItems(state, action);\r\n\r\n    case 'DISPLAYSETTINGS.TOGGLE': return DisplaySettings.toggle(state, action);\r\n    case 'DISPLAYSETTINGS.SAVE': return DisplaySettings.save(state, action);\r\n\r\n    case 'SORT.RUN': return Sort.run(state, action);\t\r\n    case 'SORT.TOGGLE': return Sort.toggle(state, action);\r\n    \r\n    case 'SWITCH.TRANSFERS': return Switch.transfers(state, action);    \r\n    case 'SWITCH.PORTFOLIOS': return Switch.portfolios(state, action);    \r\n\r\n    case 'DELETE_SELECTED_ITEMS':\treturn deleteSelectedItems(state, action);  \r\n    case 'GO_TO_PAGE': return goToPage(state, action);   \r\n    case 'TOGGLE_ACTIVE_PAGE_ROW_SELECTION':  return toggleActivePageRowSelection(state, action); \r\n    case 'TOGGLE_ITEM_BLOCK': return toggleItemBlock(state, action);\r\n    case 'TOGGLE_ROW_TOOLBAR': return toggleRowToolbar(state, action);\r\n    case 'TOGGLE_SELECT_ROW':\treturn toggleSelectRow(state, action);\r\n    case 'TOGGLE_THROBBER':\treturn toggleThrobber(state, action);\r\n    case 'SHIFT_CLICK': return shiftClick(state, action);\t\t\t\r\n   \r\n\t  default:\r\n\t\t  return state\r\n\t}\r\n}\r\n  \r\nexport default mainReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './store/reducers/mainReducer'\r\nimport { testPortfolios } from './store/testData'\r\n\r\nimport {mSort, maskAmount} from './components/functions';\r\n\r\nconst getDefaultState = async () => {\r\n\tconst defaultState = {\r\n\t\tcurrentSection: 'portfolios', \r\n\t\tcolumns: [\r\n\t\t\t{ \r\n\t\t\t\twidth: '200px', \r\n\t\t\t\tfield: 'name', \r\n\t\t\t\ttext: 'Название',\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '160px', \r\n\t\t\t\tfield: 'isActive', \r\n\t\t\t\ttext: 'Статус', \r\n\t\t\t\tformat: (isActive) => { return isActive?'Активный':'Не активный'; },\r\n\t\t\t\tvisible: true\r\n\t\t\t},\r\n\t\t\t{ \r\n\t\t\t\twidth: '150px', \r\n\t\t\t\tfield: 'amount', \r\n\t\t\t\ttext: 'Сумма', \r\n\t\t\t\ttype: 'float', \r\n\t\t\t\theaderClassName: 'header-amount',\t\r\n\t\t\t\tstyle: {textAlign: 'right', paddingRight: '15px'},\r\n\t\t\t\tformat: maskAmount,\r\n\t\t\t\tvisible: true\r\n\t\t\t}\r\n\t\t],\r\n\t\t\r\n\t\titems: testPortfolios,\t\t  \r\n\t\tselectedItems: [], \t\t\r\n\t\tsettings: { \r\n\t\t\trowsinPage: 5,\r\n\t\t\tactivePage: 0,\r\n\t\t\twithCheckBoxes: false,\r\n\t\t\tshowDisplaySettings: false,\r\n\t\t\tshowAddEditBlock: false,\r\n\t\t\teditItem: null,\r\n\t\t\tshiftClickItemId: null,\r\n\t\t\ttoolBarRowId: null\r\n\t\t},\r\n\t\tshowThrobber: false,\r\n\t\tsortParams: [{field: \"name\", type: \"default\", ascOrder: true}]\t\t\r\n\t}; \r\n\tconst newItems = null;  \r\n\t//const newItems = await getDataFromBack('/getportfolios/');  \r\n\t\r\n\tif (newItems) {\r\n\t\tdefaultState.items = newItems;\r\n\t} else {\t\t\r\n\t\tconsole.warn('Отсутствует подключение к БД, показаны тестовые данные.');\r\n\t}\r\n\r\n\tmSort(defaultState.items, defaultState.sortParams);\r\n\r\n\treturn defaultState;\r\n}\r\n\r\n//let preLoadedState = getDefaultState();\r\ngetDefaultState().then(result => { \r\n\tlet preLoadedState = result;\r\n\tconst store = createStore(\t\r\n\t\trootReducer, preLoadedState, \r\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t);\r\n\t\r\n\tReactDOM.render(\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>, \r\n\t\tdocument.getElementById('root')\r\n\t);\r\n});  \r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}